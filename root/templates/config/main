[% # config/main
   #
   # This is the main View configuration template. It is processed before
   # any other page by virtue of it being defined as a PRE_PROCESS
   # template.  This is the place to define any extra template variables,
   # macros, load plugins, and perform any other template setup.

   IF c.config.debug;
     # define a debug() macro directed to c's log
     MACRO debug(message) CALL c.log.debug(message);
   END;

   # Site-wide data
   site = {
     copyright => '2000-2011 The WormBase Consortium',
     unknown   => 'unknown/not applicable',     # what to display if a field is empty/not applicable.
   };

   WB2ACE_MAP = c.model('WormBaseAPI').modelmap.WB2ACE_MAP.class;
   ACE2WB_MAP = c.model('WormBaseAPI').modelmap.ACE2WB_MAP.class;

    MACRO tag2link(data,text,title) BLOCK;
      IF data.defined;
        UNLESS text; text = data.label; END;
        IF data.class.defined && data.class != 'text';
          ln = data.coord.start ? gbrowselink(data, data.id) : text2link(data.class, data.id, text, title, data.taxonomy, data.dbt);
          IF data.style;
            '<span style="'_ data.style _ "\">$ln</span>";
          ELSE;
            "$ln";
          END;
        ELSIF data.exists('class') && data.class == undef && data.id;
            # the key 'class' exists, but value is undef
            # a scenario where xapian fetch by ID fails to find the object
            searchlink('all', data.id, text);
        ELSE;
          data.label || data;
        END;

        images_cell(data);

        FOREACH ft IN data.footnotes;
          '<sup>' _ ft _ '</sup> ';
        END;

      END;
   END;

    MACRO images_cell(data) BLOCK;
        IF data.image;
          '<div class="slink img-link"  rel="expression_pattern_images" href="' _ data.image _ '" title="expression image for ' _ data.id _ '">';
             '<div class="expr-img-wrapper">';
             '<img src="' _ data.image _ '" />';
             '</div>';
          '<span><small>view images</small></span>';
          '</div>';
        END;
        IF data.curated_images.defined;
            '<div class="img-link-collection">';
            FOREACH cur_img IN data.curated_images;
              description = cur_img.description || 'curated pictures for ' _ data.id;
              '<div class="slink img-link" href="/rest/widget/picture/' _ cur_img.id _ '/lightbox"  title="' _ description _  '">';
                 '<div class="expr-img-wrapper">';
                 '<img src="' _ expr_img_url(cur_img.thumbnail, 200)  _ '" />';
                 '</div>';
                '<span><small>view images</small></span>';
              '</div>';
            END;
            '</div>';
        END;
    END;

    MACRO expr_img_url(img, size) BLOCK;
        # note: size can only be 200, 600, or falsey
        IF size;
            size = '_' _ size;
        ELSE;
            size = '';
        END;
        img.class _ '/' _ img.name _ size _ '.' _ img.format ;
    END;

   # Link a hash of objects
   # Suitable for hashes of objects created by _pack_objects()
   MACRO tags2link(data, separator, expandable_title, max_size) BLOCK;
      result = [];
      IF data.keys;
        IF data.class.defined;
          result.push(tag2link(data));
        ELSE;
          FOREACH key IN data.sort;
            result.push(tag2link(data.$key));
          END;
        END;
      ELSIF ref(data) == 'ARRAY';
        FOREACH item IN data;
          result.push(tag2link(item));
        END;
      ELSE;
        data;
      END;
      IF (expandable_title && (result.size > (max_size || 10)));
        WRAPPER toggle title=result.size _ ' ' _ expandable_title;
          result.join(separator || '<br />');
        END;
      ELSE;
      result.join(separator || '<br />');
      END;
   END;


   MACRO get_url(class, id, taxonomy) BLOCK;
        IF (site.external_urls.$class.defined);
            get_external_url(class, id);
        ELSE;
          class = (ACE2WB_MAP.$class || class) FILTER lower;
          IF c.config.sections.species.$class.defined;
            c.uri_for('/species', taxonomy || 'c_elegans' ,class, id).path;
          ELSIF (class == 'bench');
            c.uri_for('/me', id).path;
          ELSIF (class == 'page');
            id;
          ELSIF (class == 'genomic_location');
            gbrowse_url(taxonomy, id);
          ELSIF (class == 'txt');
            '';
          ELSIF !(c.config.sections.resources.$class.defined);
            c.uri_for('/search', 'all', id).path;
          ELSE;
            c.uri_for('/resources', class, id).path;
          END;
        END;
   END;

# Like tag2link, but for cases where we only have text and no object.
# You must provide both the id and text.
# URLs
    MACRO text2link(class,id,text,title,taxonomy, dbt) BLOCK;
      IF (site.external_urls.$class.defined);
          external_link(class, text, id, dbt);
      ELSIF id.match('CHROMOSOME');
        text;
      ELSE;
        class = (ACE2WB_MAP.$class || class) FILTER lower;
        url = get_url(class, id, taxonomy);

        IF class =='gene';
          text = markup_locus("$text", "locus", 1);
        ELSIF class =='variation' || class=='variation_name';
          text = markup_var("$text","var", 1);
        END;

        text = url ? "<a href=\"$url\" class=\"$class-link\" title=\"$title\">$text</a>" : "$text";

        IF downloadable(class);
          "<span class='slink-box'><a href='" _ c.uri_for('/rest/widget', class, id, 'sequences').path  _ '?colorbox=1' _ "' class='button ui-corner-all tl slink' data-class='$class' tip='view sequence'>";
            "<span class='ui-icon ui-icon-dna ui-button'></span>";
          "</a>";
          "</span>";
          "<span class='slink-label'>" _ text _ "</span>";
        ELSE;
            text;
        END;
      END;
   END;


    MACRO searchlink(class, id, text) BLOCK;
        IF  !(c.stash.object.name.data.defined('taxonomy')) || (c.stash.object.name.data.defined('taxonomy') &&
            c.config.sections.species_list.defined( c.stash.object.name.data.taxonomy )); # Don't link out for non-wormbase species
            url = c.uri_for('/search', class, id).path ;
            "<a href=\"$url\" class=\"$class-link\">$text</a>";
        ELSE;
            "$text";
        END;
    END;

    # return true for a downloadable object
    MACRO downloadable(class) BLOCK;
      cls = (class || object.name.data.class) | lower;
      cls.match('^(sequence|protein|transcript|cds|clone)$');
    END;

    # generate the gbrowse url. Figure out which bioproject (cannonical) to use if none supplied
    # generates the gbrowse_img link if image = 1
    MACRO gbrowse_url(taxonomy, id, bioproject, image) BLOCK;
      IF taxonomy.match('(?i).+_(PRJ\w+)');
        full_taxonomy = taxonomy;
      ELSIF bioproject;
        full_taxonomy = taxonomy _ '_' _ bioproject;
      ELSIF c.config.sections.species_list.defined(taxonomy);
        FOREACH bp IN c.config.sections.species_list.$taxonomy.bioprojects.keys;
          NEXT UNLESS ((!bioproject) || c.config.sections.species_list.$taxonomy.bioproject.$bp.cannonical);
          full_taxonomy = taxonomy _ '_' _ bp;
        END;
      END;
      IF c.config.installation_type.match('^dev');
        # HACK! to direct dev installation to staging, with GBrowse installed
        'http://staging.wormbase.org'; # uncomment if you need the hack
      END;
      c.uri_for('/tools', 'genome', (image ? 'gbrowse_img' : 'gbrowse'), full_taxonomy).path _ (id ? '?name=' _ id : '');
    END;


    MACRO gbrowselink(data, label, search) BLOCK;
      valid_classes = ['gene', 'variation', 'sequence', 'transcript'];
      species = undef;
      IF data.taxonomy;
        FOREACH s IN c.config.sections.species_list.keys;
          IF s == data.taxonomy;
            species = s;
          END;
        END;
      END;
      IF species;
        linkouts = [];
        species = species == 'all' ? 'c_elegans' : species;
        bioproject = data.bioproject || c.config.sections.species_list.$species.bioprojects.keys;
        FOREACH bp IN bioproject;
          IF data.taxonomy && (valid_classes.grep(data.class).size > 0);
              # if applicable, hack to remove bioproject prefix in WBID(ie. PRJNA248909:FL81_00001 becomes FL81_00001)
              matched = item.name.id.match('PRJ.+:(\w+)');
              query = matched ? matched.0 : item.name.id;

              url = gbrowse_url(species, item.name.class _ ":" _ query, bp);
              linkouts.push(label ? "<a href=\"$url\">$label (BioProject $bp)</a>" : "<span id='fade'>[<a href=\"$url\">Legacy GBrowse</a>]</span>");
          ELSIF(!search);
              url = gbrowse_url(species, '', bp);
              linkouts.push(data.label ? "<a href=\"$url\">" _ data.label _ " (BioProject $bp)</a>" : "<span id='fade'>[<a href=\"$url\">gbrowse (BioProject $bp)</a>]</span>");
          END;
        END;
        linkouts.join(' ');
      END;
    END;


    MACRO jbrowse_url(taxonomy, position_string, bioproject, is_preview_url, tracks, options) BLOCK;
      IF taxonomy.match('(?i).+_(PRJ\w+)');
        full_taxonomy = taxonomy;
      ELSIF bioproject;
        full_taxonomy = taxonomy _ '_' _ bioproject;
      ELSIF c.config.sections.species_list.defined(taxonomy);
        FOREACH bp IN c.config.sections.species_list.$taxonomy.bioprojects.keys;
          NEXT UNLESS ((!bioproject) || c.config.sections.species_list.$taxonomy.bioproject.$bp.cannonical);
          full_taxonomy = taxonomy _ '_' _ bp;
        END;
      END;

      IF is_preview_url && taxonomy == 'c_elegans';
        queries = {
            data => 'data/' _ taxonomy _ '_simple',
            loc => position_string
        };
      ELSIF taxonomy.match('(?i).+_(PRJ\w+)');
        queries = {
            data => 'data/' _ taxonomy,
            loc => position_string
        };
      ELSIF full_taxonomy;
        queries = {
            data => 'data/' _ full_taxonomy,
            loc  => position_string
        };
      ELSE;
        queries = {
            data => 'data/' _ taxonomy _ '_' _ bioproject,
            loc => position_string
        };
      END;

      FOREACH key IN options.keys;
          queries.$key = options.$key;
      END;

      queries.tracks = tracks;

      IF position_string.match('add=.*;?');
        # for BLAST results
        coord_parts = position_string.match('add=(\S+?)\+(\S+?)\+(\S+?)\+(\S+)$');
        refseq = coord_parts.0;
        label  = coord_parts.1;
        coords = coord_parts.3;

        pairs  = coords.split(',');

        minstart = 2000000000;
        maxend   = 0;
        subfeatures = [];
        FOREACH pair IN pairs;
          coord = pair.match('(\d+)\-(\d+)');
          start = coord.0;
          end   = coord.1;
          minstart = start < minstart ? start : minstart;
          maxend   = end   > maxend   ? end   : maxend;
          subfeatures.push('{"seq_id":"'_ refseq _'","start":'_ start _',"end":'_ end _',"type":"match_part"}');
        END;

        feature_part = '[{"seq_id":"'_ refseq _'","start":'_ minstart _',"end":'_ maxend _',"name":"'_ label _'","type":"match","subfeatures":['_ subfeatures.join(',')  _']}]';

        track_part   = '[{"label":"' _ label _ '","type":"JBrowse/View/Track/CanvasFeatures","store":"url","subParts":"match_part","glyph":"JBrowse/View/FeatureGlyph/Segments"}]';
        loc_part     = position_string.match('^([^;]+);?');
        position_string = loc_part.0;
        queries.addFeatures = feature_part;
        queries.addTracks   = track_part;
        queries.loc         = position_string;
        queries.tracks = queries.tracks || 'Curated_Genes,Hits,Classical_alleles,Polymorphisms';
      ELSIF position_string.match('([IVX]+|gene):.*');  # for location widgets and gene
        queries.tracks = queries.tracks || 'Curated_Genes,Classical_alleles,YACs_Fosmids_Cosmids';
      END;

      IF c.config.installation_type.match('^dev');
        # HACK! to direct dev installation to staging, with GBrowse installed
        # 'http://staging.wormbase.org'; # uncomment if you need the hack
      END;
      IF is_preview_url;
          queries.tracklist=0;
          queries.nav=0;
          queries.overview=0;
          url = c.uri_for('/tools', 'genome', 'jbrowse-simple', 'full.html', queries).path_query().replace('\+', '%20');
      ELSE;
          # the trailing / for jbrowse url part is important..
          url = c.uri_for('/tools', 'genome', 'jbrowse-simple/', queries).path_query().replace('\+', '%20');
      END;
      url;
    END;

    MACRO jbrowselink(data, label, search, tracks) BLOCK;
      taxonomy = data.taxonomy == 'all' ? 'c_elegans' : data.taxonomy;
      species = c.config.sections.species_list.$taxonomy;
      label = label || data.label;
      IF species;
        linkouts = [];
        bioproject = data.bioproject || species.bioprojects.keys;
        FOREACH bp IN bioproject;
            valid_classes = ['gene', 'variation', 'sequence', 'transcript'];
            IF data.class == 'genomic_location';
                pos_display_string = pad_jbrowse_coordinates(label);
            ELSIF data.class && (valid_classes.grep(data.class).size > 0);
                pos_display_string = data.class _ ':' _ (data.id.match('PRJ.+:(\w+)').0 || data.id);
            END;

            IF pos_display_string;
                url = jbrowse_url(taxonomy, pos_display_string, bp, 0, tracks);
                linkouts.push(search ? "<span id='fade'>[<a href=\"$url\">Browse genome (BioProject $bp)</a>]</span>" : "<a href=\"$url\">$label</a>");
            END;
        END;
        linkouts.join(' ');
      END;
    END;

    MACRO pad_jbrowse_coordinates(coord_string) BLOCK;
      # compute padding for displaying coordinates
      coord_parts = coord_string.match('(.+):(\d+)\.{2}(\d+)');
      chromosome_id = coord_parts.0;
      IF coord_parts.1 < coord_parts.2;
        start_pos = coord_parts.1;
        end_pos = coord_parts.2;
      ELSE;
        start_pos = coord_parts.2;
        end_pos = coord_parts.1;
      END;

      USE Math;
      start_pos_display = Math.int(start_pos - 0.5 * (end_pos - start_pos));
      start_pos_display = start_pos_display < 0 ? 0 : start_pos_display;  # make sure no starting coord < 0
      end_pos_display = Math.int(end_pos + 0.3 * (end_pos - start_pos));
      pos_display_string = chromosome_id _ ':'
        _ start_pos_display _ '..' _ end_pos_display;
      pos_display_string;
    END;

    MACRO build_jbrowse_view_js BLOCK;
%]
            function buildJbroweView(viewId, viewUrl, linkUrl) {
                var innerJBrowseContainer = $jq(viewId + " .jbrowse-view-iframe");
                var heightDefault = 400;

                var reset = (function(innerJBrowseContainer, url) {
                  return function(height) {
                    var innerJBrowseElement = innerJBrowseContainer.find('object');
                    innerJBrowseContainer.addClass('jbrowse-view-iframe__loading');
                    innerJBrowseElement.attr('data', url);
                    innerJBrowseElement.height(height);

                    function updateHeight() {
                        var heightComputed = 10;
                        var jbrowseDocument = innerJBrowseElement.get(0).contentDocument || innerJBrowseElement.get(0).contentWindow.document;
                        var tracks = jbrowseDocument.getElementsByClassName('track');
                        for (var i=0; i < tracks.length; i++) {
                          var id = tracks[i].id;
                          if (id !== 'gridtrack' && id !== 'overviewtrack_overview_loc_track' && id !== 'static_track') {
                            heightComputed += tracks[i].offsetHeight;
                          }
                        }
                        var previousHeight = innerJBrowseElement.height();
                        innerJBrowseElement.height(Math.max(heightDefault, heightComputed));
                        WB.scrollToOffsetHeightDiff(innerJBrowseElement, previousHeight);
                        return heightComputed;
                    }

                    function progressInit(max_num_retries, num_stablization_step) {
                      var previousHeights = [0];
                      return {
                        isProgressComplete: function() {
                          return previousHeights.length > max_num_retries || (
                            previousHeights.length > num_stablization_step &&
                            previousHeights[0] !== 0 &&
                            previousHeights.slice(1, num_stablization_step).every(
                              function(prevHeight) {
                                return prevHeight === previousHeights[0];
                              }
                            )
                          );
                        },
                        updateProgress: function(newHeight) {
                          previousHeights.unshift(newHeight);
                        },
                      };
                    }


                    var progress = progressInit(60, 20);
                    var interval = setInterval(function() {
                      if (progress.isProgressComplete()) {
                        innerJBrowseContainer.removeClass('jbrowse-view-iframe__loading');
                        clearInterval(interval);
                      } else {
                        var newHeight = updateHeight();
                        progress.updateProgress(newHeight);
                      }
                    }, 2000);

                  };
                })(innerJBrowseContainer, viewUrl);

                reset(heightDefault);

                $jq(viewId + " .jbrowse-view-iframe").click(function(){
                  window.location.href = linkUrl;
                });

            }
[%
    END;


    MACRO jbrowse_view(data, label, tracks, url_options) BLOCK;
      taxonomy = data.taxonomy == 'all' ? 'c_elegans' : data.taxonomy;
      species = c.config.sections.species_list.$taxonomy;
      label = label || data.label;

      IF species;
        bioproject = data.bioproject || species.bioprojects.keys;
        FOREACH bp IN bioproject;
            true_coords = data.label; #don't use the data.pos_string which is padded for GBrowse
            padded_coords = pad_jbrowse_coordinates(true_coords);
            view_url = jbrowse_url(taxonomy, padded_coords, bp, 1, tracks, url_options);
            view_id = "jbrowse-view-$padded_coords-$bp";
            view_id = view_id.replace('\W+', '_');
%]
<div id="[%- view_id -%]" class="jbrowse-view-container">
    <div class="jbrowse-view-iframe" style="overflow: hidden;">
        <object id="innerJBrowse" type="text/html" style="pointer-events:none;position:relative;top:-1px;left:0;width:100%;height:14px;overflow: hidden;"></object>
    </div>
    <script type="text/javascript">
	(function() {
	    [% build_jbrowse_view_js %]
	    buildJbroweView('#[%- view_id -%]', '[%- view_url -%]', '[%- jbrowse_url(taxonomy, padded_coords, bp, 0, tracks) -%]');
        })();
    </script>
</div>
[%
        END;
      END;
    END;

MACRO jbrowse_protein_schematic(data) BLOCK;
    view_id = "protein-schematic";
    cds_wbid = data.reference_id;
    location = data.location;
%]
<div id="[%- view_id -%]" class="jbrowse-view-container">
    <div class="jbrowse-view-iframe" style="overflow: hidden;">
        <object id="innerJBrowse" type="text/html" style="pointer-events:none;position:relative;top:-1px;left:0;width:100%;height:14px;overflow: hidden;"></object>
    </div>
    <script type="text/javascript">
	(function() {

	  [% build_jbrowse_view_js %]

          fetch('/rest/version').then(function(response) {
	    return response.json();
	  }).then(function(data) {
	    var releaseVersion = data && data.version;
	    // var releaseVersion = 'WS274';
            var baseURL = 'https://s3.amazonaws.com/wormbase-modencode/protein_schematic/'+ releaseVersion + '/';
            var protein = '[%- cds_wbid -%]';
	    var location = '[%- location -%]';
	    var tracks = [
	      'seg',
	      'signalp',
	      'tmhmm',
	      'ncoils',
	      'Catalytic residue',
	      'Metal binding site',
	      'Post transcriptionally modified site',
	      'Motifs',
	      'Selected BLASTP Homologies',
	      'Mass spec peptides'
	    ];

            function isTrackAvailableAsync(track) {
              return fetch(baseURL + 'tracks/' + track + '/' + protein + '/trackData.jsonz').then(function(response) {
	        return response.ok;
	      });
	    };

	    Promise.all(tracks.map(function(track) {
	      return isTrackAvailableAsync(track);
	    })).then(function(results) {
	      var availableTracks = ['Exon boundaries'].concat(tracks.filter(function(track, index) {
	        return results[index];
	      }));
	      var jbrowseBaseURL = '/tools/protein_schematic/?loc=' + encodeURIComponent(location) + '&tracks=' + encodeURIComponent(availableTracks.join(','));
	      var previewJBrowseURL = jbrowseBaseURL + '&tracklabels=0&nav=0&tracklist=0&overview=0';
	      var linkoutJBrowseURL = jbrowseBaseURL;
	      buildJbroweView('#[%- view_id -%]', previewJBrowseURL, linkoutJBrowseURL);
	    });

	  });

        })();
    </script>
</div>
[%
END;

MACRO agr_logo_link(id, dbt) BLOCK;
    '<div class="agr-logo-link">';
    external_link(
        'AGR',
        '<img width="150px" src="/img/agr_logo.png" alt="Alliance of Genome Resources" />',
        id,
        dbt
    );
    '</div>';
END;


# use this to pluraize a word
# there exists a TT plugin which does this, but better.
#   See: Template::Plugin::Lingua::EN::Inflect
    MACRO pluralize(word, size) BLOCK;
      UNLESS word; RETURN; END;
      size = size || 0;
      IF (size > 1);
        IF (matches = word.match('^(.*)y$'));
          word = matches.0 _ 'ies';                   # antibody -> antibodies
        ELSIF (matches = word.match('^(.*)ium$'));
          word = matches.0 _ 'ia';                    # bacterium -> bacteria
        ELSIF (matches = word.match('^(.*)cus$'));
          word = matches.0 _ 'ci';                    # locus -> loci
        ELSIF (matches = word.match('^(.*)sis$'));
          word = matches.0 _ 'ses';                   # analysis -> analyses
        ELSIF (matches = word.match('^(.*)ius$'));
          word = matches.0 _ 'ii';                    # radius -> radii
        ELSIF (matches = word.match('^(.*)ss$'));
          word = matches.0 _ 'sses';                  # class -> classes
        ELSIF (matches = word.match('^(.*)[^s]$'));
          word = word _ "s";                          # fallback
        END;
      END;
      word;
    END;

# create venn type diagram with tables and colours
    MACRO venn(title_a, list_a, title_b, list_b, title_ab, list_ab, title_none, list_none, expandable_title) BLOCK;
    %]
    <table class="venn" cellspacing="0" cellpadding="5">
      <tr class="venn-a"><th colspan="2">[% title_a %]</th></tr>
          <tr><th class="venn-a"></th>
          <th class="venn-ab"></th>
          <th class="venn-b">[% title_b %]</th>
          <th>[% title_none %]</th>
      </tr>
      <tr class="venn-data">
          <td class="venn-a">
            [% tags2link(list_a, ', ', expandable_title); %]
          </td>
          <td class="venn-ab">
            [% tags2link(list_ab, ', ', expandable_title); %]
          </td>
          <td class="venn-b">
            [% tags2link(list_b, ', ', expandable_title); %]
          </td>
          <td>
            [% tags2link(list_none, ', ', expandable_title); %]
          </td>
        </tr>
        <tr><td></td><td class="venn-b" colspan=2></td></tr>
    </table>
    [%
    END;


# Used to determine the type of page for layout saving
  MACRO page_class BLOCK;
    UNLESS (object.name.data.class);
      ret = c.req.path.replace('[/_]', '-');
      UNLESS ret;ret='home'; END;
      ret;
    ELSE; class; END;
  END;

  MACRO template_title BLOCK;
    IF (species && species != 'all');
      tt_s = (s_arr = species.split('_').1) ? species.substr(0,1) _ '. ' _ s_arr : species FILTER ucfirst;
    END;
    IF object.name.data.id;
      object.name.data.label _ ' (' _  object.name.data.class _ ')';
    ELSIF path_parts;
      path_parts.last.replace('_', ' ') FILTER ucfirst;
    ELSIF query;
      query _ ' - search';
    ELSIF (class && class != 'all' && class != 'home');
      c.config.sections.species.$class.title || c.config.sections.resources.$class.title || (section == 'tools' && class) || ( section == 'me' && (c.user.username  || 'My WormBase' _ ' ' _ tt_s));
    ELSIF tt_s;
      tt_s;
    ELSIF section;
      section FILTER ucfirst;
    END;
    '';
  END;

# Use to create outgoing links from the site
# params: link          - the ID for the link found in root/templates/config/external_urls
#         text          - text displayed in the link
#         id (optional) - the unique id needed in the url.  If not provided, base url is used.
#         dbt (optional)- entry type in the database
# returns: formatted html to link using url and description from config.
#          Has google analytics code to record clicks and opens new window
    MACRO external_link(link, text, id, dbt) BLOCK;
       IF (link||text||id);
        text = text || id || link;
        ext_url = get_external_url(link, id, dbt);
        "<a href=\"$ext_url\"
            onClick=\"WB.recordOutboundLink(this, \'Outbound Links\', \'$ext_url\');\"
            target=\"_blank\"" _  (desc ? "title=\"$desc\"" : "" ) _ "><span class=\"wb-ext\">$text</span></a>";
       END;
    END;

    MACRO get_external_url(db, id, dbt) BLOCK;
       ext_url = "";
       link = match_link(db) || db;

       IF(site.external_urls.defined(link));
          desc = site.external_urls.$link.description;
          IF id;
              USE String=format((dbt && site.external_urls.$link.defined(dbt)) ? site.external_urls.$link.$dbt.replace('%S', '%s') : site.external_urls.$link.search.replace('%S', '%s'));
              IF (link == 'ensembl');
                UNLESS (id.match('&')); id= 'Homo_sapiens&' _ id; END;
                array=id.split('&');
                ext_url = String(array.first array.last);
              ELSE;
                ext_url = String(id);
              END;
          END;
          ext_url = (ext_url || site.external_urls.$link.base);
        END;
        ext_url || (link.match('^http(s?)|ftps?') ? link : 'http://' _ link);
    END;

# lookup external sites by case insensitive match of its name
    MACRO match_link(link) BLOCK;
      link = link.replace('\W', '_');
      link_regex = '^(?i)' _ link  _ '$';    # case insensitive regex
                                             # avoid interpolation of regex symbols
      link_name  = site.external_urls.keys.grep(link_regex);
      link_name = link_name && link_name.pop;
      IF !link_name;
        llink = link FILTER lower;
        IF llink.match('(?i)^(sw|sptrembl|tr)$'); link_name = 'UniProt'; END;
      END;
      link_name;  # return a false value if no matched link is found
    END;


    MACRO get_section(class) BLOCK;
      IF (c.config.sections.species.$class.defined);
        'species';
      ELSE;
        'resources';
      END;
    END;

    # Markup link-outs to URIs given within the text.
    MACRO markup_linkouts(text) BLOCK;
      text = "$text";
      text.replace('(^|\W)(http://.+?)(\s|$)', external_link('$2', '$1$2$3'));
    END;

# Markup any OMIM reference in a text
# marks up ALL references in the format OMIM:(\d+)
# only works for up to two references listed in a row with OMIM before only the first one
# eg. OMIM:604297, 309000
    MACRO markup_omim(text) BLOCK;
      text = "$text";
      text.replace('OMIM:(\d{6})((, )(\d{6}))?', text.search('OMIM:(\d{6})((, )(\d{6}))') ? external_link('OMIM','OMIM:$1', '$1') _  '$3' _ external_link('OMIM', '$4', '$4') : external_link('OMIM','OMIM:$1', '$1'));
    END;

# Markup any locus reference in text
# [A-Za-z]{3,4}-(\d){1,3}[a-z]?
    MACRO markup_locus(text, no_link) BLOCK;
      text = "$text";
      # The '(^|[^/])\K' at the beginning of the regexp denotes that the match in group $2
      # cannot be preceeded by a '/' character. That way, substrings of URIs are not linked
      # as locus references. (see also 'markup_var')
      # The trailing \b ensures boundery (end of a word) is encountered
      # The [A-Z]? is important to differentiate multiple transcripts at the same locus
      text.replace('(^|[^/])\K(\b([A-Z][a-z]{1,2}\-)?[a-z]{3,4}-(\d+(\.\d+)?)[a-z]*( [IVXLCDM]+|\(RNAi\))?[A-Z]?\b)', span_class('$2', "locus", 'gene', no_link));
    END;

# Markup any variation name in text
    MACRO markup_var(text, no_link) BLOCK;
      text = "$text";
      # The '(^|[^/])\K' at the beginning of the regexp denotes that the match in group $2
      # cannot be preceeded by a '/' character. That way, substrings of URIs are not linked
      # as variation names. (see also 'markup_locus')
      text.replace('(^|[^/])\K(\b((\()?(ttTi|stP|hIn|[a-z]{1,3}|[a-z]*CE2-)\d+)+)', span_class('$2', "var",'variation', no_link));
    END;

# format taxonomy
    MACRO taxonomy(genus, species) BLOCK;
      IF species;
        g = genus.chunk(1).0 _ ".";
      ELSE;
        s = genus.split(' ');
        g = s.first.chunk(1).0 _ ".";
        species = s.last;
      END;
        "<span class=\"species\">$g $species</span>";
    END;

    MACRO span_class(text, class, ace_class, no_link) BLOCK;
      IF no_link;
        "<span class=\"$class\">$text</span>";
      ELSE;
        "<span class=\"$class\">" _ searchlink(ace_class, text, text) _ "</span>";
      END;
    END;

    MACRO markup(text, omim, locus, var, no_link) BLOCK;
      # text = text FILTER html;
      # custom html function to avoid double encoding html entities
      text = text.replace('<', '&lt;');
      text = text.replace('>', '&gt;');
      text = text.replace('"', '&quot;');
      text = text.replace('&\s', '&amp; ');
      text = markup_linkouts(text);
      UNLESS (locus == 0); text = markup_locus(text, (no_link || 0)); END;
      UNLESS (var == 0); text = markup_var(text, (no_link || 0)); END;
      UNLESS (omim == 0); text = markup_omim(text); END;
      text;
    END;

     MACRO cite_image(extsrc,src) BLOCK;
           '<small>';
           IF extsrc;
              link = extsrc.template;
              FOR match IN extsrc.template.match('\<([^>]+)\>', 'global');
                  match_item = extsrc.template_items.$match;
                  IF extsrc.template_items.size == 1; # Person heuristic
                     IF src; # there is an internal source... tag it
                        replacement = tag2link(src);
                     ELSE; # we only have their name?
                        replacement = match_item.text;
                     END;
                  ELSE;
                     replacement = external_link(match_item.db,
                                                match_item.text, match_item.id);
                  END;
                  link = link.replace("\<$match\>", replacement);
              END;
              link;
           ELSIF src;
              IF src.class != 'Paper'; # this is from a person
                 'Courtesy of ';
              END;
              tag2link(src);
           ELSE;
              'No reference data.';
           END;
           '</small>';
     END;

   # load up any other configuration items
   PROCESS config/external_urls;

   # set defaults for variables, etc.
   DEFAULT
     message = 'There is no message';

   # Set some default templates
   DEFAULT field_block  = "field_block";
   DEFAULT widget_block = "widget_block";

   # For debugging ONLY!
   USE Dumper(Indent=1);

   git_commit_id = '$Id$';
   git_commit_id = git_commit_id.remove('\$Id\: | \$');

   git_update_time = '$Date$';
   git_update_time = git_update_time.remove('\$Date|\: |\$');

   #######################################
   # Define some convenient macros
   #######################################
   # image: wrap a src in an image tag using the format plugin
   USE image  = format('<img src="%s" valign="middle" width="100%">');
   USE toggle = format('<img border="0" height="11" src="%s" width="6" alt="&gt;" valign="middle"> %s');

-%]

[%################################
  # Convenience perl macros
  ################################
%]

[%# Sort a keys of a hash by an expression on its value.
  # Returns a string of keys joined by the specified separator.
  # Args:
  # hash_ref - hash
  # sub_as_str - expression on the value, denoted by $_
               - Ex. '$_->{title}' or 'lc($_)'
  # seperator  - default to ';;'
%]
[% MACRO sort_keys_by(hash_ref, sub_as_str, seperator)  PERL %]
    my $hash_ref = $stash->get('hash_ref');
    my $sub_as_str = $stash->get('sub_as_str');
    my $separator = $stash->get('separator') || ';;';
    sub ssub {
        my ($key) = @_;
        $_ = $hash_ref->{$key};

        return $key unless $sub_as_str;
        return eval($sub_as_str);
    }
    my @sorted_keys = sort { ssub($a) cmp ssub($b) } keys %$hash_ref if ref($hash_ref) eq 'HASH';
    print join($separator, @sorted_keys);
[% END %]

[% MACRO decode_uri(coded_uri) PERL%]
    my $coded_uri = $stash->get('coded_uri');

    use URI::Escape;
    my $uri = uri_unescape($coded_uri);
    print "$uri";
[% END %]

[% MACRO json_encode(hash) BLOCK;
    PERL; %]
        my $hash = $stash->get('hash');
	use JSON;
	my $hash_str = JSON->new->encode($hash);
        print($hash_str);
    [% END;
END %]

[% MACRO asset_hash BLOCK -%]
    [% PERL; -%]
         open(my $fh_js, "<", "root/js/wormbase.js") or die "cannot open < wormbase.js file: $!";
         open(my $fh_css, "<", "root/css/main.css") or die "cannot open < main.css file: $!";
         use Digest::MD5;
         my $ctx = Digest::MD5->new;
         $ctx->addfile($fh_js);
         $ctx->addfile($fh_css);
         print($ctx->hexdigest);
    [%- END; %]
[%- END %]
