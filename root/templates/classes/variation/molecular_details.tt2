



[%
     WRAPPER $field_block title="Comparative info";
    agr_explore_link( fields.name.data.id, 'allele');
END;



      wildtype_length = 0;
      mutant_length = 0;

MACRO highlight_seq(sequence, probe, colour) BLOCK;
  probe = probe.chunk(1).join('\s?') FILTER lower;
  sequence.replace('(' _ probe _ ')', '<span style="background:' _ colour _ '">$1</span>');
END;

WRAPPER $field_block title="Variation Type" key='variation_type';
      fields.variation_type.data.general_class.join('; ');
      IF fields.variation_type.data.physical_class; ': '; END;
      fields.variation_type.data.physical_class FILTER lower;
END;


WRAPPER $field_block title="Sequencing Status" key="sequencing_status";
         fields.sequencing_status.data;
END;

# Nucleotide change: one or more possible changes for this allele;
WRAPPER $field_block title="Nucleotide Change" key="nucleotide_change";

    FOREACH change IN fields.nucleotide_change.data;
          IF fields.nucleotide_change.data.size > 1; change.type _ ': '; END;
          label = [];
          # Let's only display deletions/insertions < 100 bp;
           IF change.wildtype && (change.wildtype.length < 100);
                  change.wildtype;
                  '/';
                  label.push(change.wildtype_label);
           ELSIF (change.wildtype.length > 0) ;
                  change.wildtype.length _ ' bp deletion';
           END;

           IF change.mutant && (change.mutant.length < 100);
                  change.mutant;
                  label.push(change.mutant_label);

           ELSIF (change.mutant.length > 0);
                  change.mutant.length _ ' bp insertion';
           ELSIF !change.wildtype;
              '(sequence unknown / unlisted)';
           END;
           IF label.size > 0;
              ' (' _ label.join(' / ') _ ')' _ '<br />';
           END;
        wildtype_length = wildtype_length + change.wildtype.length;
        mutant_length = mutant_length + change.mutant.length;
       END;
   END;

    WRAPPER $field_block title="Protein Change" key="amino_acid_change";
      FOREACH change IN fields.amino_acid_change.data;
        tag2link(change.transcript) _ ' (' _ change.amino_acid_change _ ')<br/>';
        #            tag2link(change.transcript) _ ' (' _ change.amino_acid_change _ ')<br/>';

        # Display the conceptual translation.
        feature_type = 'Predicted_CDS';

        IF fields.features_affected.data.$feature_type;
          FOREACH feature IN fields.features_affected.data.$feature_type.sort;
            NEXT UNLESS feature.item.id == change.transcript.id;
            IF feature.wildtype_conceptual_translation;
              # This won't actually result in download option for the conceptual translation.
              # tag2link(feature.item) _ ' (mutant' _ change.amino_acid_change _ ')<br/>';
              IF feature.wildtype_conceptual_translation.search('>');
                WRAPPER toggle title=change.transcript.id _ ' conceptual translation';
                  '<div>';
                  '<div class="sequence-container">';
                  '<pre>' _ feature.wildtype_conceptual_translation _ '</pre>';
                  '<pre>' _ feature.mutant_conceptual_translation _ '</pre>';
                  '</div>';
                  '</div>';
                END; # of feature loop
              ELSE;
                '<div id="variation-conceptual-translation' _ loop.count _ '"><div class="loading"><img src="/img/ajax-loader.gif" alt="Loading..." /></div></div>';
                '<script>WB.renderVariationConceptualTranslation(' _ json_encode(feature || {}) _ ', "variation-conceptual-translation' _ loop.count _ '", "' _ fields.name.data.id _ '")</script>';
              END;
            END;
          END;
        END;
      END;
    END;

   WRAPPER $field_block title="Flanking PCR Products" key="flanking_pcr_products";
       tags2link(fields.flanking_pcr_products.data, ', ');
   END;


   # Conditionally display some information if this is a polymorphism


       WRAPPER $field_block title="Polymorphism type" key="polymorphism_type";
                fields.polymorphism_type.data;
       END;

       WRAPPER $field_block title=pluralize("Strain", fields.reference_strain.data.size) key ="reference_strain";
                tags2link(fields.reference_strain.data, ', ', 'strains');
       END;

       WRAPPER $field_block title="Polymorphism status" key ="polymorphism_status";
                fields.polymorphism_status.data;
       END;

       WRAPPER $field_block title="Assays" key="polymorphism_assays";
           FOREACH a IN fields.polymorphism_assays.data.keys;
               '<h5>';
           assay = fields.polymorphism_assays.data.$a;
		   IF assay.assay_type.match('rflp');
	   	      'RFLP assay';
		   ELSE;
		      'Sequence-only assay';
		   END;
	       '</h5>';
   	       '<table>';
			 '<tr><td>Verified PCR product:</td><td>' _ tag2link(assay.pcr_product) _ '</td></tr>';
	    		 '<tr><td>Left Oligo:</td><td class="sequence-container">' _ assay.pcr_product.left_oligo _ '</td></tr>';
	    		 '<tr><td>Right Oligo:</td><td class="sequence-container">' _ assay.pcr_product.right_oligo _ '</td></tr>';
			 IF assay.pcr_conditions.dna; '<tr><td>PCR conditions:</td><td>' _ assay.pcr_product.pcr_conditions _ '</td></tr>'; END;
			 IF assay.pcr_product.dna; '<tr><td class="sequence-container">Sequence:</td><td>' _ assay.pcr_product.dna _ '</td></tr>'; END;
	    '</table>';
           IF assay.assay_type.match('rflp');
	    '<table>';
	    	    '<tr><th>Source</th><th>Enzyme</th><th>Resulting Bands</th></tr>';
		    '<tr><td>Wild type strain digest</td><td>' _ assay.reference_strain_digest _ '</td>';
		         '<td>' _ assay.reference_strain_bands _ '</td>';
 	 	    '<tr>';
		    '<tr><td>Polymorphic strain digest</td>';
		         '<td>' _ assay.polymorphic_strain_digest _ '</td><td>' _ assay.polymorphic_strain_bands _ '</td>';
		    '<tr>';
	    '</table>';
           END;
'<br />';
          END;
        END;

   # Mutation context
   WRAPPER $field_block title="Sequence" key="context";
    IF fields.context.data.placeholder;
        fields.context.data.placeholder.seqLength _ ' bp';"<br/>";
        'Too large to display. Download full sequence from ';
        '<a href="ftp://ftp.wormbase.org/pub/wormbase/species/">FTP</a>';
        ' site.';
    ELSE;

      '<p class="caveat-emptor">Note: sequence is reported on the (+) strand.</p><p>';

      '<span class="sequence-container" style="background-color:#FF8080">red</span> = mutation <br />';
      '<span class="sequence-container" style="background-color:yellow">yellow</span> = flanking sequence <br />';
      wildtype.sequence = fields.context.data.wildtype_full;
      mutant.sequence = fields.context.data.mutant_full;

      IF fields.cgh_deleted_probes.data;
      '<span class="sequence-container" style="background-color:#FFAA54">orange</span> = CGH deleted probe <br />';
        wildtype.sequence = highlight_seq(wildtype.sequence, fields.cgh_deleted_probes.data.left_flank, '#FFAA54') IF fields.cgh_deleted_probes.data.left_flank;
        wildtype.sequence = highlight_seq(wildtype.sequence, fields.cgh_deleted_probes.data.right_flank, '#FFAA54') IF fields.cgh_deleted_probes.data.right_flank;
      END;

      IF fields.cgh_flanking_probes.data;
      '<span class="sequence-container" style="background-color:#80FFFF">blue</span> = CGH flanking probe <span id="fade">(if within the window of displayed sequence)</span><br />';
        IF fields.cgh_flanking_probes.data.left_flank;
          wildtype.sequence = highlight_seq(wildtype.sequence, fields.cgh_flanking_probes.data.left_flank, '#80FFFF');
          mutant.sequence = highlight_seq(mutant.sequence, fields.cgh_flanking_probes.data.left_flank, '#80FFFF');
        END;
        IF fields.cgh_flanking_probes.data.right_flank;
          wildtype.sequence = highlight_seq(wildtype.sequence, fields.cgh_flanking_probes.data.right_flank, '#80FFFF');
          mutant.sequence = highlight_seq(mutant.sequence, fields.cgh_flanking_probes.data.right_flank, '#80FFFF');
        END;
      END;
      '</p>';


      wildtype_length = (wildtype_length > 4000) ? 0 : 1;
      mutant_length = (mutant_length > 4000) ? 0 : 1;


      wildtype.header = "wild type, with 500 bp flanks";
      sequence(wildtype, '', wildtype_length);
      mutant.header =  markup_var(object.name.data.label, 1) _" with 500 bp flanks";
      sequence(mutant, '', mutant_length);
    END;
   END;

  WRAPPER $field_block title="Sequence" key="sequence_context";
      '<div id="variation-sequence-context"><div class="loading"><img src="/img/ajax-loader.gif" alt="Loading..." /></div></div>';
      '<script>WB.renderVariationSequence(' _ json_encode(fields.sequence_context.data || {}) _ ', "variation-sequence-context")</script>';
  END;

  WRAPPER $field_block title="CGH Flanking Probes" key="cgh_flanking_probes";
      '<div class="sequence-container">';
        "5' flank -- " _ fields.cgh_flanking_probes.data.left_flank _ "<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" _ fields.cgh_flanking_probes.data.right_flank _ " -- 3' flank";
    '</div>';
  END;

  WRAPPER $field_block title="Deletion Verification" key="deletion_verification";
    cell_content(fields.deletion_verification.data);
  END;

   WRAPPER $field_block title="Features Affected" key="features_affected";


        features = fields.features_affected.data;
       IF features.Chromosome;
          'Chromosome: ';
          features.Chromosome.0.label;
          '&ndash;' IF features.Chromosome.0.label == '';
          '<br />';
       END;

       IF features.Gene;
          IF features.Gene.size > 1; 'Genes: '; ELSE; 'Gene: '; END;
          tags2link(features.Gene, ', ', 'genes') _ '<br />';
       END;

       IF features.Interactor;
          WRAPPER toggle open=1 title=pluralize('Interactor', features.Interactor.size) _ ' (' _ features.Interactor.size _ ')';
            tags2link(features.Interactor);
          END;
       END;

       FOREACH feature_type IN ['Predicted_CDS', 'Transcript', 'Pseudogene', 'Feature', 'Clone'];
          NEXT UNLESS fields.features_affected.data.$feature_type;

          IF ref(fields.features_affected.data.$feature_type) == 'ARRAY';

            t =  pluralize(feature_type.replace('_', ' '), fields.features_affected.data.$feature_type.size) _ ' (' _ fields.features_affected.data.$feature_type.size _ ')';

            WRAPPER toggle open=1 title=t;

             FOREACH feature IN fields.features_affected.data.$feature_type.sort;
                '<div>';
                s = '';
                protein_effects = feature.protein_effects;
                IF protein_effects;
                  FOREACH effect_type IN protein_effects.sort;
                    effect = protein_effects.$effect_type;
                    s = s _ 'Effect on protein: ' _ effect_type.replace('_', ' ') _ '<br />';
                    # s = s _ (effect.subtype || effect.position || '') _ '<br />';
                    # s = s _ effect.description _ '<br />';
                    s = s _ (effect_type == 'Missense' && effect.aa_change ? "${effect.aa_change} (${effect.position})" : effect.description) _ '<br />';
                  END;
                END;


                location_effects = feature.location_effects;

                IF location_effects;
                    FOREACH effect_type IN location_effects.sort;
                        effect = location_effects.$effect_type;
                    s = s _ 'Affects: ' _ effect_type.replace('_', ' ') _ '<br />';
                    END;
                END;
                feature.affects = s;

               '</div>';
              END; # of feature loop

              order = (feature_type == 'Clone') ? ['item', 'fstart','fstop','start','stop'] : (feature_type == 'Transcript') ? ['item', 'vep_consequence', 'vep_impact', 'polyphen', 'sift', 'cds', 'cds_position', 'cdna_position', 'protein_position', 'codon_change', 'amino_acid_change', 'exon_number', 'intron_number', 'hgvsc', 'hgvsp'] : ['item', 'affects', 'fstart','fstop','start','stop'];
              build_data_table(order=order,
                             columns={  item    => 'Transcript',
                                        affects => 'Affects',
                                        fstart    => 'feature start',
                                        fstop    => 'feature stop',
                                        start    => 'start relative to feature',
                                        stop    => 'stop relative to feature',
                                        vep_consequence => 'VEP consequence',
                                        vep_impact => 'VEP impact',
                                        polyphen => 'PolyPhen prediction',
                                        sift => 'SIFT prediction',
                                        cds => 'CDS',
                                        cds_position => 'CDS position',
                                        cdna_position => 'cDNA position',
                                        protein_position => 'Protein position',
                                        codon_change => 'Codon (WT/mutant)',
                                        amino_acid_change => 'Amino acid (WT/mutant)',
                                        exon_number => 'Location exon',
                                        intron_number => 'Location intron',
                                        hgvsc => 'HGVSc',
                                        hgvsp => 'HGVSp',
                                     },
                             passed_data=fields.features_affected.data.$feature_type,
                             key=feature_type);
            END; # END toggle wrapper
          ELSE; # If array not returned
            pluralize(feature_type.replace('_', ' ')) _ ': ' _ fields.features_affected.data.$feature_type _ ' <br />';
          END;

       END; # of feature type loop;
   END; # of Features Affected WRAPPER;

   WRAPPER $field_block title="Detection Method" key="detection_method";
      fields.detection_method.data;
   END;

   WRAPPER $field_block title="Affects Splice Site" key="" disabled=!(fields.affects_splice_site.data.donor || fields.affects_splice_site.data.acceptor);
      IF fields.affects_splice_site.data.acceptor;
         WRAPPER $field_block title="Acceptor" key='';
            fields.affects_splice_site.data.acceptor;
         END;
     END;
     IF fields.affects_splice_site.data.donor;
        WRAPPER $field_block title="Donor" key='';
          fields.affects_splice_site.data.donor;
        END;
     END;
   END;

   WRAPPER $field_block title="Causes Frameshift" key="causes_frameshift";
      fields.causes_frameshift.data;
   END;

%]
