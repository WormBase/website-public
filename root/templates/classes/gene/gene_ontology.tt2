[% WRAPPER $field_block title="Gene Ontology ribbon" key="gene_ontology_ribbon"; %]
    <div id="gene_ontology_ribbon_container" class="go-ribbon-container"></div>
[% END; %]


[% WRAPPER $field_block title="External source";
agr_explore_link('WB:' _ fields.name.data.id, 'gene');
END; %]

[% WRAPPER $field_block title="Gene Ontology graph" key="gene_ontology"; %]
    <div id="gene-ontology-graph-container" class="ontology-graph-container"></div>
[% END; %]

[%#

   gene_ontology; custom data table processing used on the Gene Summary.

   This is essentially generic processing for a nested data structure
   intended to be multiple tables.

   eg. data contains a hash.array.hashrefs (instead of single tier array.hashrefs)

%]



[% go_table_settings = '
"drawCallback": WB.partitioned_table(1, function(rowData){
    var termID = rowData[0];
    var term = rowData[1];
    return "<td>" + termID + "</td><td>"+ term + "</td>";
}),
"columnDefs": [
            { "targets": 1, "visible": false },
            { "targets": 2, "orderData": [1] },
            { "targets": 2, "width": "40%" },
            { "targets": 2, "width": "20%" }
        ],
        "autoWidth": false
'%]
[% go_table_listener = "
// .on( 'click', 'tr.group', function () {
//         var table = \$jq(this).closest('table').DataTable();
//         var currentOrder = table.order()[0];
//         if ( currentOrder[0] === 0 && currentOrder[1] === 'asc' ) {
//             table.order( [ 0, 'desc' ] ).draw();
//         }
//         else {
//             table.order( [ 0, 'asc' ] ).draw();
//         }
//     } );
" %]
[%


       key="gene_ontology";
       # One table for each key (here, a GO facet)
       facets = fields.$key.data.keys.sort;

       table_count = 0;
       FOREACH facet IN facets;
            IF fields.$key.data.$facet > 0;
                WRAPPER $field_block title="$facet" key="$key";
                   table_count = table_count + 1;

                  # Here we assume that the inner data structure as an array of hashes

                  full_view = build_data_table(order = ['term_id', 'term_description', 'term', 'evidence_code', 'with'],
                             columns = {   extensions   => 'Extensions',
                                                 with   => 'With',
                                                 term   => 'Term',
                                              term_id   => 'Term ID',
                                        evidence_code   => 'Evidence code' },
                             passed_data = fields.$key.data.$facet,
                         key     = "table_${table_count}_go",
    style = go_table_settings,
    listener = go_table_listener);


                   summary_view = build_data_table(order = ['term_id', 'term_description'],
                             columns = {   extensions   => 'Extensions',
                                              term_id   => 'Term ID',
                                              term_description => 'Term',
                                },
                             passed_data = fields.gene_ontology_summary.data.$facet,
                         key     = "table_${table_count}_go_summary")
;

                   multi_view("go_multi_view_$facet",
                              [{   key => "go_summary_$facet",
                                default => 1,
                                 label => 'Summary view',
                                  view => summary_view },
                               {   key => "go_$facet",
                                 label => 'Full view',
                                  view => full_view }]);


                 END; # END of WRAPPER
              END; # END IF facet contains data
         END; # END of facets
%]

<script>
  (function(){
    if (document.getElementById('gene_ontology_ribbon_container')) {
      WB.renderGORibbon([% json_encode(fields.gene_ontology_ribbon.data || []) %], "gene_ontology_ribbon_container");
    }
  })();
</script>

<script type="text/javascript">
(function(){
  if (document.getElementById('gene-ontology-graph-container')) {
    WB.setupCytoscapeGoGraph('gene-ontology-graph-container', 'WB:[% object.name.data.id %]');
  }
})();
</script>
