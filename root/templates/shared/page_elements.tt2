[%#
####################################################
#
#  Widgets, Fields, Subfields
#
####################################################
%]

[% MACRO evidence(data, id, text, label, expand) BLOCK %]
  [% IF data %]
  <div class="evidence [% IF text %] result[% END %]">
    [% IF text.exists('label') %]
      [% tag2link(text) %]
    [% ELSIF( text.match(".*\\<[^>]+>.*") ) # don't link html %]
          [% "$text" %]
    [% ELSE %]
      [% markup("$text") %]
    [% END %]
    [% id = id || 0; %]
  [% IF text %]    <div id="evidence_[% id %]" class="ev ui-helper-hidden" style="display: [% expand ? 'block' : 'none' %];"> [% END %]
    [% pairs = data.pairs; %]
    [% FOREACH pair IN pairs -%]
       [% type = pair.key %]
       [% value = pair.value; %]
        <b>[% type_label = '' _ type; type_label.replace('_',' ') %]</b>[% IF  value.size > 0 %]:
          [% IF (type == 'curatorial_remarks'); '<br />'; END; %]
          [% tags2link(value, ((type == 'curatorial_remarks') ? '<br />' : '; '), 'items', 50) %]
        [% END %]
        [% UNLESS loop.last %]<br>[% END %]
    [% END %]
[% IF text %]    </div>
    <div class="ev-more">
      <div class="ev-more-text"><span>[% label ? label : 'evidence' %]</span></div>
      <div class="v ui-icon [% expand ? 'ui-icon-triangle-1-n' : 'ui-icon-triangle-1-s' %]"></div>
    </div>
[% END %]
  </div>
  [% ELSE %]
    [% IF text.exists('label') %]
	[% tag2link(text) %]
    [% ELSIF( text.match(".*\\<[^>]+>.*") ) # don't link html %]
    [% "$text" %]
    [% ELSE %]
	[% markup(text) %]
    [% END %]
  [% END %]
[% END %]

[% MACRO user_login_info BLOCK %]
    [% UNLESS c.user_exists %]
          <div style="padding:0.5em">
            You must <h3 style="display:inline"><a class='lightbox' href="[% c.uri_for('/login').path %]" >Login</a></h3> to use this feature
          </div>
          <script>
            WB.getPlugin("colorbox", function(){
              $jq(".lightbox").colorbox();
            });
          </script>
    [% END %]

[% END %]

[% BLOCK toggle %]
    <div class="toggle [% IF lazy; 'load-toggle'; END; %]"
         [% IF href; ' href="' _ href _ '"'; END; %]
         [% IF id; ' id="' _ id _ '"'; END; %]
         [% IF iframe; ' iframe="' _ iframe _ '"'; END; %]>
      <span style="float:left" class="ui-icon ui-icon-triangle-1-[% open ? 's' : 'e' %]"></span>
      [% title %]
    </div>
    <div class="returned [% toggle_class %]" [% IF open; 'style="display:block"'; END;%]>
        [% content %]
    </div>
[% END %]



[% MACRO linkUser(user) BLOCK;
    IF (user.wbid && user.wb_link_confirm);
       text2link('person', user.wbid, user.username);
    ELSIF user.username;
       user.username;
    ELSE;
      '<span id="fade"><i>[user deleted]</i></span>';
    END;
  END;
%]



[% MACRO extended_social_links BLOCK;
      IF c.user.open_ids;
         FOREACH id IN c.user.open_ids;
	    IF id.provider == 'twitter';
              '&nbsp;&nbsp;<a href="http://twitter.com/' _ id.screen_name
                                    _ '" class="twitter-follow-button" data-show-count="true">Follow @'
	     			    _ id.screen_name
				    _ '</a>'
				    _ '<script src="https://platform.twitter.com/widgets.js" type="text/javascript"></script>';
             END;
         END;
      END;
END;
%]


[% MACRO linkPage(page) BLOCK %]
    [% label = page.title %]
    [% UNLESS label; label = page.url; END; %]
    [% IF page.is_obj %]
      [% array=page.url.split('/') %]
      [% text2link(array.slice(-2,-2).0, array.last, label, label, array.slice(-3,-3).0) %]
    [% ELSE %]
      <a href="[% page.url %]">[% label %]</a>
    [% END %]
[% END %]



[% MACRO issue_table(issues, issue_type) BLOCK %]
[% IF issues %]
  [% USE time_dir = Time.Duration %]

<!-- Eventually provide a filter of results
  <p>
  <h4>Filter (not wired yet)</h4>

    State:
    <select id="issue_status">
    <option value="" selected="selected">---------------</option>
    <option value="new">new</option>
    <option value="open">open</option>
    <option value="resolved">resolved</option>
    <option value="hold">hold</option>
    <option value="duplicated">duplicated</option>
    </select>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

    Severity:
    <select id="issue_severity">
    <option value="" selected="selected">---------------</option>
    <option value="critical">critical</option>
    <option value="severe">severe</option>
    <option value="normal">normal</option>
    <option value="trivial">trivial</option>
    </select>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

    Responsible:
    <select id="issue_assigned_to">
    <option value="" selected="selected">------------------</option>
    [% FOREACH p IN curators %]
      <option value="[% p.id %]">[% username(p) %]</option>
    [% END %]
    </select>
  </p>
 -->

  <table border="0" cellspacing="0" width="100%" class="issue-table">
    <tr align=left>
      <th>#</th>
      <th>Title</th>
      <th>Visibility</th>
      <th>State</th>
      <th>Severity</th>
      [% UNLESS (issue_type == 'page') %]<th>Page</th>[% END %]
      <th>Date</th>
      <th>Reported by</th>
      <th>Responsible</th>
      [% IF c.check_user_roles('admin') %]
        <th><button class="issue-delete" onClick="WB.issue.isDelete($jq(this));return false;" rel="[% c.uri_for('/rest','feed','issue').path %]">Delete</button></th>
      [% END %]
    </tr>
    [% even = 1 %]
    [% FOREACH IS IN issues %]

      [% IF IS.is_private;
         UNLESS (c.check_any_user_role('admin', 'curator') || (c.user.user_id == IS.reporter.user_id)); NEXT ; END;
      END;
      %]


      [% url = c.uri_for(c.controller('Tools').action_for('issue'),IS.id).path %]
      <tr
        [% IF (even == 1);
	     myclass='r0';
	     even=0;
	   ELSE;
	      myclass='r1';
	      even=1;
	   END;
        %]
	class="[% myclass %] [% IS.severity %] [% IS.state %]">

        <td><a href="[% url %]">[% IS.id %]</a></td>
        <td ><a href="[% c.uri_for(c.controller('Tools').action_for('issue'),IS.id).path %]">[% IS.title %]:</a> <i>[% txt = IS.content.chunk(30); txt.0; IF txt.1; '...'; END; %]</i></td>
        <td>[% IF IS.is_private ; ' <em>private</em>' ; END %]</td>
        <td>[% IS.state %]</td>
        <td>[% IS.severity %]</td>
        [% UNLESS (issue_type == 'page') %]<td>[% linkPage(IS.page) %]</td>[% END %]
        <td>[% time_dir.ago(current_time - IS.timestamp, 1)  %]</td>
        <td>[% IF IS.reporter_id; linkUser(IS.reporter); END %]</td>
        <td>[% IF IS.responsible_id; linkUser(IS.responsible); END %]</td>
        [% IF c.check_user_roles('admin') %]<td><input type='checkbox' class="issue-deletebox" name="[% IS.id %]" /></td>[% END %]
      </tr>
    [% END %]
  </table>
  [% ELSE %]
   <span id="fade">No issues have been reported.</span>
  [% END %]
[% END %]

[% BLOCK timer %]
  [% IF c.check_user_roles('admin') || c.config.timer %]
    <div class="ui-state-highlight ui-corner-all" style="position:absolute; left:30%; top:0.6em;">
    <span class="ui-icon ui-icon-clock" style="float: left; margin-right: .3em;"></span>
    [% server_details("") %] in [% FILTER format("%2.2f") %][% c.stats.elapsed %][% END %]s
    </div>
  [% END %]
[% END %]

[% MACRO data_source_label BLOCK %]
    [%# display the data source of the widget to help with testing %]
    [%# development and staging instance only %]
    [% IF c.config.installation_type == 'development' ||
        c.config.installation_type == 'staging' ||
        c.check_user_roles('admin') ||
        c.config.timer %]
        Served from
        [% IF c.stash.data_from_datomic %]
            <span class="data-source-label datomic"
                title="This widget contains data from Datomic.">Datomic</span>
        [% END %]
        [% IF c.stash.data_from_ace %]
            <span class="data-source-label"
             title="This widget contains data from ACeDB.">ACeDB</span>
        [% END %]
        [%- IF c.stash.served_from_cache -%]
        <span class="data-source-label">Couch
            <a target="_blank" href="https://couchdb.wormbase.org/[%- constants.acedb_version | lower -%]/[%- c.stash.served_from_cache -%]">raw</a>
             |
            <a target="_blank" href="https://couchdb.wormbase.org/_utils/document.html?[%- constants.acedb_version | lower -%]/[%- c.stash.served_from_cache -%]">futon</a>
        </span>
        [% END %]
    [% END %]
[% END %]



[%# The Floating Box on the overview widget %]
[% BLOCK highlight_box %]
    <div class="detail-box-wrapper">
        <div class="detail-box ui-corner-all">
           [% taxonomy %]
           [% content %]
           [% wb_id_field %]
           [% download_field %]
        </div>
    </div>
[% END %]

[% #get page info %]
[% BLOCK page_info %]
  [% path = c.req.path %]
  [% url = c.req.uri.path.remove('(\/+)$') %]
  [% label = c.req.args.-1 %]
  [% IF (c.action.name == 'index'); label = 'home';
    ELSIF c.action.name == 'me'; label = 'my wormbase';
    END; %]
  [% is_obj = object.name.data.defined('id') %]
  [% IF object.name.data.id; label = object.name.data.label; END; %]
[% END %]

[% MACRO get_star_id(id) BLOCK;
  id.remove('[^_a-zA-Z0-9-]');
  END %]

[% MACRO make_star(wbid, href) BLOCK;
  '<div class="star-status-' _ wbid _ ' load-star" href="' _ href _ '"></div>';
  END %]


[%# options:
   print="always" to print the field even if there is no data
%]

[% BLOCK field_block %]

    <div class="field
    [%# Add a class to disable / hide empty fields %]
    [% TRY; IF (key && (!fields.$key.defined('data')
                        || ((ref(fields.$key.data) == 'ARRAY' || ref(fields.$key.data) == 'HASH') && fields.$key.data.size == 0))
                    && (!fields.$key.defined('count') || fields.$key.count == 0))
                || disabled; " disabled "; END; END;%]

        ">
      [% IF title; %]
         <div class="field-title">
                  <span title="[% tooltip ? tooltip : fields.$key.description %]" class="[%- (tooltip || fields.$key.description) && 'has-tooltip' -%]">
                     [% title.replace('_+', ' ') _ ': ' %]
                   </span>
          </div>
      [%  END; %]
          <div class="field-content">
             [% content %]
          </div>
     </div>

[% END %]

[% BLOCK curator_block %]
     [% # Curator (and sometimes admin) specific content) %]
  [% IF c.check_user_roles('curator') OR c.check_user_roles('admin') %]

    <div class="field field-curator" id="[% title FILTER html %]">
         <div class="field-title">
                  [% IF title ; title _ ': '; END; %]
         </div>

         <div class="field-content">
             [% content %]
         </div>
         <span id="fade" class="desc">curator only field</span>
     </div>
  [% END %]
[% END %]


[%#

    Build a JQuery dataTable.
    Parameters:
        order  : array of columns
        columns: hash ref associating columns to labels
        key    : data key for accessing the stash
        passed_data : in lieu of passing a key for accessing data,
                      pass in pre-structured data as passed_data;
                      useful in cases when you want to change the processing heuristic.

   Note: build_data_table is no longer wrapped in a field BLOCK. This was too
   restrictive for formatting, for example, in cases where it was
   necessary to include multiple tables in a single field.
%]

[% MACRO build_data_table BLOCK;

      local_data = passed_data ? passed_data : fields.$key.data;

      UNLESS local_data.0.exists(order.0);
        IF ref(local_data) == 'ARRAY';
          # just print the list of objects
          cell_content(local_data);
        ELSE;
          # link to search results if classsearch provided, and only string returned
          # this will happen on very large tables
          classsearch ? searchlink(classsearch, object.name.data.id, local_data): local_data;
        END;
      ELSE;
        key = key || widget;
        headers = [];
        FOREACH o IN order; headers.push(columns.$o); END;

        # generate table
        jquery_data_table_html(headers, local_data, "table_${key}_by" _ colorbox, style, table_build, order, separator, listener, column_args);
      END;
    END; # END of MACRO
%]

[%# jquery_data_table_html:

     This is Xq's original jquery data implementation with some
     sugar added to make it configurable.

     It might be better to build the table directly from the data
     structure instead of formatting it into a html table and then
     styling via javascript.
%]

[% MACRO jquery_data_table_html(table_headers, rows,table_name,style,table_build, columns, separator, listener, column_args) BLOCK %]

  [% IF rows && rows.size > 0;
       # Set up some suitable defaults
       IF rows.size < 11 || (rows.size < 31 && table_headers.size < 3);
          paginate        = 'false';
          pagination_type = 'false';
      	  length          = 'false';
      	  lengthMenu      = 'false';
          filter          = 'false';
          info            = 'false';
       ELSIF rows.size < 31;
          paginate        = 'false';
          pagination_type = 'false';
      	  length          = 'false';
      	  lengthMenu      = 'false';
      	  filter          = 'true';
          info            = 'false';
       ELSE;
          paginate        = 'true';
          pagination_type = 'full_numbers';
      	  length          = 'true';
          lengthMenu      = '[[50, 100, 150, -1], [50, 100, 200, "All"]]';
          filter          = 'true';
      	  info            = 'true';
      END;

     UNLESS table_build;

   %]
   <div style="overflow:scroll;width:100%">
    <table cellpadding="0" cellspacing="0" border="0" class="display" id="[% table_name %]">
    <thead>
        <tr>
            [% FOREACH header IN table_headers %]
            <th>[% header %]</th>
            [% END %]
        </tr>
    </thead>
    <tbody>
        [%
          FOREACH row IN rows;
            '<tr>';
	    IF ref(row) == 'HASH';
		FOREACH col IN columns;
		    cell = row.$col;
            scell = "$cell";
		    IF scell.match('^http');
			cell='<a href="' _ cell _ '">Lab link</a>';
		    END;
		    '<td>';
		    cell_content(cell, separator, undef, column_args.$col);
		    '</td>';
		END;
	    ELSE;
		FOREACH cell IN row;
		    '<td>';
		    cell_content(cell, separator);
		    '</td>';
		END;
	    END;
            '</tr>';
          END;
             %]
    </tbody>
  </table>
 </div>
    [% END %]
    <script type="text/javascript" >
WB.getPlugin("dataTables", function(){
        $jq.extend( $jq.fn.dataTableExt.oSort, {
          "scientific-pre": function ( a ) {
            return parseFloat(a);
          },
          "scientific-asc": function ( a, b ) {
            return ((a < b) ? -1 : ((a > b) ? 1 : 0));
          },
          "scientific-desc": function ( a, b ) {
            return ((a < b) ? 1 : ((a > b) ? -1 : 0));
          }
        });
        $jq.fn.dataTable.ext.type.order["html-pre"] = function ( data ) {
          if ((typeof data) === "string") {
            return data.replace(/^(<[^>]+>\s*)+/, '');
          } else {
            return data;
          }
        };
        WB.getPlugin("tabletools", function(){
          setTimeout(function(){
            if($jq.fn.dataTable.fnIsDataTable('#[% table_name %]')){
              // Hack! avoid warning of reinitializing table seen by some users, not sure why
              $jq('#[% table_name %]').dataTable();
              console.warn('#[% table_name %] is reinitialized, likely because two tables are using the same key. This could cause problem.');
            }else{
              $jq('#[% table_name %]').dataTable({
                "bPaginate"        : [% paginate %],
                "bLengthChange"    : [% length   %],
                "sPaginationType"  : "[% pagination_type %]",
                "bFilter"          : [% filter %],
                "bInfo"            : [% info %],
                "fnInitComplete"   : function(){ setTimeout(function(){ WB.resize();}, 700); },
                "sDom": '[% IF paginate.match("true") || info.match("true") ; '<"wb_table_wrapper table_paginate"Tflrtip>' ; ELSE; '<"wb_table_wrapper"Tflrtip>'; END; %]',
                "oTableTools": {
                  "sSwfPath": "/js/jquery/plugins/tabletools/media/swf/copy_csv_xls_pdf.swf",
                  "aButtons": [
                    {
                      "sExtends": "collection",
                      "sButtonText": "Save table",
                      "aButtons": [ "copy", "csv", "pdf", "print" ]
                    }
                  ]
                },
                [% style %]

              })[% listener %];
            }
          }, 1);
        });
	});
    </script>
   [% END %]

[% END %]

[% MACRO interaction_cell(cell) BLOCK;
    '<table id="interaction_cell_' _ loop.index _ '">';
    IF cell.interaction.Effector || cell.interaction.Affected;
      '<tr>';
	  '<td>' _ tags2link(cell.interaction.Effector) _ '</td>';
	  '<td style="font-size:25px">';
	  IF cell.interaction.Effector.size > 1; '}'; END;
	  '&rarr;</td>';
	  '<td>' _ tags2link(cell.interaction.Affected) _ '</td>';
      '</tr>';
    END;
    IF cell.interaction.Non_directional;
      '<tr>';
	  '<td colspan="3">';
	  FOREACH val IN cell.interaction.Non_directional;
	      tag2link(val);
	      UNLESS loop.last;
		  ' &mdash; ';
	      END;
	  END;
	  '</td>';
      '</tr>';
    END;
    '</table>';
END; %]



[% MACRO concatenated_links_cell(cell) BLOCK;

  xrefs = cell.xrefs;

  links = "";

  # Set to "xrefs" for WS236.
  FOREACH db IN xrefs_offline;
     FOREACH xref IN db.keys;
     dbname = db.$xref.name;

     # Override database names in Acedb.
      IF !site.external_urls.$dbname.defined;
	  dbname = FILTER lower; xref.name; END;  #e.g. OMIM(ACeDB) -> omim(external_urls)
      ELSE;
	  dbname = db.$xref.name;
      END;

      id    = db.$xref.accession;
      label = db.$xref.label;

      # This information is pulled from config which we might want to use in preference over ?Database;
      # Create a tooltip with information from information culled from both the database and our config.
      description = site.external_urls.$dname.description;

      href= FILTER format(site.external_urls.$dbname.search); id; END;

      # We'll use description info from the website and not the DB.
      # Should be a table of resource, ID linked to page description, maintainer.
      links = links _ external_link(href,id,label);
     END;
     links.join("<br>");
      END;
END; %]



[% MACRO show_genotype(obj) BLOCK;
    genstr = obj.str;
    IF  c.stash.object.name.data.defined('taxonomy') &&
        c.config.sections.species_list.defined( c.stash.object.name.data.taxonomy ); # Don't link out for non-wormbase species
        FOREACH key IN obj.data.keys.sort;
            lnk = tag2link(obj.data.$key);
            genstr = genstr.replace(key.replace('\-', '\-'), lnk);
        END;
    END;
    markup_var(genstr);
END; %]


[% MACRO pato_evidence(obj) BLOCK;
    entity_type = obj.entity_type || 'Entity';
    '<strong>' _
    entity_type.replace('_', ' ') _
    '</strong>: ';
    tag2link(obj.entity_term) _ ', ' _ obj.pato_term;
END; %]


[% MACRO cell_content(cell, separator, max_row, args) BLOCK;
    IF ref(cell) == 'HASH';
      IF cell.defined('species');
          '<span class="species">' _ cell.genus.chunk(1).0 _ '. ' _ cell.species _ '</span>';
      ELSIF cell.defined('class');
          IF cell.defined('label');
            tag2link(cell);
          ELSE;
            searchlink(cell.class, cell.id, cell.id);
          END;
      ELSIF cell.defined('evidence');
          evidence(cell.evidence,table_name _ index, cell_content(cell.text, separator), 'details', args.expand_evidence);
      ELSIF cell.defined('interaction');
          interaction_cell(cell);
      ELSIF cell.defined('xrefs');
          concatenated_links_cell(cell);
      ELSIF cell.defined('genotype');
          show_genotype(cell.genotype);
      ELSIF cell.defined('footnotes');
        cell_content(cell.text) _ format_footnotes(cell.footnotes);
      ELSIF cell.defined('pato_evidence');
          pato_evidence(cell.pato_evidence);
      ELSIF cell.defined('curated_images');
          images_cell(cell);
      ELSE;

        # assumes that hash passed to cell should be output as the key followed by its value
        # e.g. evidecne column of phenotypes widget of gene unc-26 contains alleles, xgenes, and rnai lists in one cell
        FOREACH key IN cell.keys.sort;
          "$key:";
          cell_content(cell.$key, undef, undef, args);
        END;
      END;
    ELSIF ref(cell) == 'ARRAY';
      IF (!separator) && (cell.size > (max_row || 10));
          WRAPPER toggle title=cell.size _ ' Results';
            list_cell_content(cell, separator, args);
          END;
      ELSE;
          list_cell_content(cell, separator, args);
      END;
    ELSE;
      cell;
    END;
  END;
%]

[% MACRO list_cell_content(cell, separator, args) BLOCK;
    IF cell.size < 2;
       FOREACH item IN cell; cell_content(item, ' ', undef, args); END;
    ELSE;
      WRAPPER ul_unless_separator;
        FOREACH item IN cell;
          IF separator;
            cell_content(item, ' ', undef, args);
          ELSE;
            '<li>' _ cell_content(item, ' ', undef, args) _ '</li>';
          END;
          IF !(ref(item) && item.defined('evidence')) && !loop.last;
              # scalar.defined always return true, so check item is ref
              separator;
          END;
        END;
      END;
    END;
END %]

[% BLOCK ul_unless_separator %]
    [% '<ul>' UNLESS separator %]
        [% content %]
    [% '</ul>' UNLESS separator %]
[% END %]

[% MACRO format_footnotes(notes) BLOCK;
  notes.join('');

  END;
%]

[% MACRO empty_widget_check BLOCK;
  not_empty;
  FOREACH field IN fields.keys;
    NEXT IF field == 'name';
    NEXT IF field == 'time_cached';  # time_cached should be moved outside of fields in WS260
    IF (fields.$field.defined('data') && !((ref(fields.$field.data) == 'ARRAY' || ref(fields.$field.data) == 'HASH') && fields.$field.data.size == 0)) ||
       (fields.$field.defined('count') && fields.$field.count > 0);
      not_empty = 1;
      LAST;
    END;
  END; %]
  [% UNLESS (not_empty || (widget == 'overview') || (widget == 'expression') || (widget == 'ontology_browser')) %]

    <span class="caveat-emptor">No [% (c.config.sections.species.$class.widgets.$widget.title || c.config.sections.resources.$class.widgets.$widget.title) FILTER lower %] data for [% object.name.data.label %]</span>
  [% END %]
[% END %]


[% BLOCK status_bar %]
<div style="float:right;padding:1em;"> |
<button id="my-cart"></button> <a href="/bench">([% c.user_session.bench.register.size %])</a>
</div>
[% END %]


[% BLOCK widget_sortable_block %]

   <!-- start [% id %] widget -->
          <div id="widget-[% type %]" class="widget-container ui-corner-all">
                <div class="ui-corner-top widget-header">
                    <div class="module-close ui-icon ui-icon-large ui-icon-close" wname="[% id %]" title="close"></div>
[% IF 0 %]                     <div class="module-max ui-icon ui-icon-extlink" wname="[% id %]" title="pop out"></div>
[% END %]
                    <h3><div class="module-min ui-icon-large ui-icon-triangle-1-s" title="minimize" wname="[% id %]"></div><span class="widget-title">[% title %]</span>
        [% IF c.config.installation_type == 'development' %]<span wname="[% id %]" class="reload ui-icon ui-icon-arrowrefresh-1-s" title="reload"></span>[% END %]
                        <span class="ui-icon ui-icon-arrow-4 hide ui-helper-hidden" title="move"></span>
                    </h3>
                </div>

                <div id="[%- id -%]-content" class="content">
                [% content %]
                </div>

                <div id="widget-footer" class="ui-helper-hidden">
[% UNLESS (type.match('^(tool)|(me)$') || id == 'basic_search' ) %]
                    <a   onClick='$jq(this).toggleClass("ui-state-highlight");' class="button feed ui-corner-all"  rel="[% c.uri_for('/rest','feed','download',class,is_class_index? 'all': this_object_id,w.id,this_object_label).path %]"><span class="ui-icon ui-icon-arrowthickstop-1-s ui-button"></span><span>download</span></a>
[% END %]
[% IF id.match('(static-widget)') && (id != 'static-widget--1')  %]
    [% IF c.check_any_user_role("admin", "curator", "editor") %]
                    <a  tip="edit" id="edit-button"  onClick='WB.StaticWidgets.edit("[% id %]");' class="button ui-corner-all"><span class="ui-icon ui-icon-pencil ui-button"></span></a>
    [% END %]
                    <a  tip="view history" id="history-button" onClick='WB.StaticWidgets.history("[% id %]");' class="button ui-corner-all"><span class="ui-icon ui-icon-clock ui-button"></span></a>
[% END %]


                </div>
        <div id="widget-feed"></div>

      </div>
   <!-- end [% id %] widget -->

[% END %]

[% MACRO multi_view(name, view_list) BLOCK;
    '<div class="multi-view-container">';

    # making buttons for the multi view
    FOREACH view IN view_list;
        view_id = view.key;
        view_button_id = view_id _ '_button';
        checked_opt = view.default ? ' checked' : '';
        '<input id="'_ view_button_id _'" name="'_ name _'" value="'_ view_id _'" type="radio" '_ checked_opt _'/>';
        '<label for="'_ view_button_id _'">' _
           view.label _
        '</label>';
    END;

    # making the views
    FOREACH view IN view_list;
        display = view.default ? '' : ' style="display:none;"';
        '<div id="'_ view.key _'" class="multi-view" '_ display _'>';
            view.view;
        '</div>';
    END;

    '</div>';
%]
<script type="text/javascript">
  WB.multiViewInit();
</script>
[%
END; %]

[% BLOCK tip %]
    <div class="tip">
         <strong>Tip: </strong>
        [% content %]
    </div>
[% END %]



[%#
 #####################################################
 #
 #  Server Details: the server that generated the
 #  block of code. Mostly useful for debugging.
 #
 ####################################################
%]
[% MACRO server_details(title) PERL %]
      my $host = `hostname`;
      chomp $host;
#     print "\n\n<!-- [% title %] generated by: $host -->\n\n\n\n\n";
      print "Generated by: $host";
[% END %]





[%#
####################################################
#
#  GA
#
####################################################
%]
[% BLOCK google_analytics %]
   <!-- Google Analytics -->
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

//ga('create', 'UA-16257183-1', 'auto');  // Replace with your property ID.
ga('create', 'UA-16257183-1', {'cookieDomain': 'wormbase.org'});
ga('require', 'displayfeatures');
ga('send', 'pageview');
<!-- End Google Analytics -->

[% END %]



[%#
####################################################
#
#  OLARK
#
####################################################
%]
[% BLOCK olark %]
<!-- begin olark code -->
<script data-cfasync="false" type='text/javascript'>/*<![CDATA[*/window.olark||(function(c){var f=window,d=document,l=f.location.protocol=="https:"?"https:":"http:",z=c.name,r="load";var nt=function(){
f[z]=function(){
(a.s=a.s||[]).push(arguments)};var a=f[z]._={
},q=c.methods.length;while(q--){(function(n){f[z][n]=function(){
f[z]("call",n,arguments)}})(c.methods[q])}a.l=c.loader;a.i=nt;a.p={
0:+new Date};a.P=function(u){
a.p[u]=new Date-a.p[0]};function s(){
a.P(r);f[z](r)}f.addEventListener?f.addEventListener(r,s,false):f.attachEvent("on"+r,s);var ld=function(){function p(hd){
hd="head";return["<",hd,"></",hd,"><",i,' onl' + 'oad="var d=',g,";d.getElementsByTagName('head')[0].",j,"(d.",h,"('script')).",k,"='",l,"//",a.l,"'",'"',"></",i,">"].join("")}var i="body",m=d[i];if(!m){
return setTimeout(ld,100)}a.P(1);var j="appendChild",h="createElement",k="src",n=d[h]("div"),v=n[j](d[h](z)),b=d[h]("iframe"),g="document",e="domain",o;n.style.display="none";m.insertBefore(n,m.firstChild).id=z;b.frameBorder="0";b.id=z+"-loader";if(/MSIE[ ]+6/.test(navigator.userAgent)){
b.src="javascript:false"}b.allowTransparency="true";v[j](b);try{
b.contentWindow[g].open()}catch(w){
c[e]=d[e];o="javascript:var d="+g+".open();d.domain='"+d.domain+"';";b[k]=o+"void(0);"}try{
var t=b.contentWindow[g];t.write(p());t.close()}catch(x){
b[k]=o+'d.write("'+p().replace(/"/g,String.fromCharCode(92)+'"')+'");d.close();'}a.P(2)};ld()};nt()})({
loader: "static.olark.com/jsclient/loader0.js",name:"olark",methods:["configure","extend","declare","identify"]});
/* custom configuration goes here (www.olark.com/documentation) */
olark.identify('6652-820-10-1192');/*]]>*/</script><noscript><a href="https://www.olark.com/site/6652-820-10-1192/contact" title="Contact us" target="_blank">Questions? Feedback?</a> powered by <a href="http://www.olark.com?welcome" title="Olark live chat software">Olark live chat software</a></noscript>
<!-- end olark code -->
[% END %]



[%#
####################################################
#
#  CHATLIO
#
####################################################
%]
[% BLOCK chatlio %]
<script type="text/javascript">
 var _chatlio=_chatlio||[];
!function(){var t=document.getElementById("chatlio-widget-embed");if(t&&window.React&&_chatlio.init)return void _chatlio.init(t,React);for(var e=function(t){return function(){_chatlio.push([t].concat(arguments))}},i=["identify","track","show","hide","isShown","isOnline"],a=0;a<i.length;a++)_chatlio[i[a]]||(_chatlio[i[a]]=e(i[a]));var n=document.createElement("script"),c=document.getElementsByTagName("script")[0];n.id="chatlio-widget-embed",n.src="https://w.chatlio.com/w.chatlio-widget.js",n.async=!0,n.setAttribute("data-embed-version","1.1");

  n.setAttribute("data-widget-id","d08a2c44-e392-4f31-4d73-7dbdaeefa136");
  n.setAttribute("data-start-hidden", false);
  c.parentNode.insertBefore(n,c);
 }();
</script>
[% END %]





[%#
 #####################################################
 #
 #  ShareThis
 #
 ####################################################
%]
[% BLOCK share_this %]
   <!-- ShareThis. Or not. -->

   <script type="text/javascript"
   src="http://w.sharethis.com/widget/?tabs=web%2Cpost%2Cemail&amp;charset=utf-8&amp;services=reddit%2Cdigg%2Cfacebook%2Cmyspace%2Cdelicious%2Cstumbleupon%2Ctechnorati%2Cgoogle_bmarks%2Cyahoo_bmarks%2Cslashdot&amp;style=default&amp;publisher=7ab86fe8-5972-4c0c-b8d5-e8a0240bc09d&amp;popup=true">
   </script>
[% END %]



[%
 ####################################################
 #
 #  COMMENTS
 #
 ####################################################
%]


[% MACRO other_names BLOCK;
      WRAPPER $field_block title="Other names" key="other_names";;
          fields.other_names.data.join(', ');
      END;
END;
%]

[% MACRO best_blastp_matches BLOCK;
   matches = c.stash.fields.best_blastp_matches.data;
   IF matches.hits;
   WRAPPER $field_block title="Best BLASTP matches" key="best_blastp_matches";

      build_data_table(order=['evalue','taxonomy','hit','description','percent'],
                       columns={ taxonomy => 'Species',
                                 hit      => 'Hit',
                                 description => 'Description',
                                 evalue   => 'BLAST e-value',
                                 percent  => '% Length'
                                },
                       key='best_blastp_matches',
                       passed_data=matches.hits,
                       style = '"aoColumns": [ { "sSortDataType": "dom-text", "sType": "scientific" },null,null,null,null],
"orderFixed": { "post": [[ 0, "asc" ], [ 4, "desc" ]] },
');

    WRAPPER toggle title="View full BLASTP List" lazy=1 href=c.uri_for('/rest','field','protein',"$matches.biggest",'blastp_details').path id="blast_details_toggle";
    END;

    END;
  END;




END;
%]



[% MACRO expression_patterns(column_order) BLOCK ;

   WRAPPER $field_block title="Expression patterns" key="expression_patterns";

       build_data_table(order=column_oder || ['expression_pattern','gene', 'description','author'],
                      columns={
                          expression_pattern => 'Pattern',
                          gene => 'Gene',
                          description  => 'Description',
                          author => 'Author',
                             },
                    key='expression_patterns');
    END;

   END;
%]


[% MACRO central_dogma BLOCK %]

  NOT DONE!

   <table border="1">
      <tr><td colspan="4">Central Dogma</td></tr>

      <tr>
         <td rowspan="[% fields.central_dogma.data.gene_models.size || 0 + 1 %]">
              [% tag2link(fields.central_dogma.data.gene) %]
         </td>
         <td>Transcript</td><td>Exons</td><td>Protein</td>
      </tr>

     [% FOREACH gene_model IN fields.central_dogma.data.gene_models %]
      <tr>
     <td>
          [% tag2link(gene_model.cds) %]
     </td>

         <td>
          <pre>
          [% FOREACH exon IN gene_model.exons;
                   'exon' _ loop.count _ ': ' _ exon.start _ '..' _ exon.stop  _ '<br />';
               END;
           %]
           </pre>
         </td>

     <td>
          [% tag2link(gene_model.protein) %]
     </td>
      </tr>
     [% END %]

          </td>
      </tr>
</table>



       <div class="inline-columns">
          [% IF fields.central_dogma.data.gene %]
           <div>
              <b>Gene</b><br />
              [%# FOREACH item IN fields.central_dogma.data.genes %]
                 [% tag2link(gene) %]<br />
              [%# END %]
           </div>
      [% END %]

          [% IF fields.central_dogma.data.transcripts.size > 0 %]
            <div>
               <span class="rarrow"></span>
            </div>
            <div>
                <b>Transcripts</b><br />
                 [% FOREACH item IN fields.central_dogma.data.transcripts %]
                   [% tag2link(item) %]<br />
                 [% END %]
           </div>
         [% END %]

          [% IF fields.central_dogma.data.cds.size > 0 %]
            <div>
               <span class="rarrow"></span>
            </div>
            <div>
                <b>CDS</b><br />
                 [% FOREACH item IN fields.central_dogma.data.cds %]
                   [% tag2link(item) %]<br />
                 [% END %]
           </div>
         [% END %]

     </div>

[% END %]


[% MACRO laboratory BLOCK ;
    # The Laboratory field
    # Expects the stash to contain the "laboratory" key.
    WRAPPER $field_block title="$title"||'Laboratory' key="laboratory";
        labs = passed_data || fields.laboratory.data;
        FOREACH lab IN labs;

            '<div style="white-space:nowrap;">';
            IF title == "Available From" && lab.laboratory.label.match('CGC') && fields.name.data.class == 'strain';
                external_link('cgc', lab.laboratory.label, fields.name.data.id);
            ELSE;
                tag2link(lab.laboratory);
            END;
            '</div>';

            # Include the lab representative, if one exists
            IF lab.representative;
              "(" _ tags2link(lab.representative, ', ') _ ")" ;
            END;

            IF !loop.last;
              '<br /><br />';
            END;

        END;
    END;
END;
%]

[%#

    Shared phenotypes and phenotypes_not_observed macros. These macros
    could conceivably be folded into shared/widgets/phenotypes.tt2, although
    there are some specific phenotype.tt2 widgets that have some additional
    fields.
%]

[% MACRO build_phenotype_table(custom_args) BLOCK;

    phenotype_table_args = {
        order => ['phenotype', 'entity', 'evidence'],
        columns => {
            phenotype  => 'Phenotype',
            entity => 'Entities Affected',
            evidence => 'Supporting Evidence',
        },
        column_args => {
            evidence => {
                expand_evidence => 1
            }
        },
        key => 'phenotypes',
        style => '
            "drawCallback": WB.partitioned_table(0),
            "columnDefs": [
                { "targets": 0, "visible": true },
                { "targets": 1,
                  "render": function ( data, type, full, meta ) {
                    return data || "<span class=\"fade\">N/A</span>";
                  }
                },
                { "targets": 2, "width": "40%" },
            ],
            "autoWidth": false'

    };

    phenotype_table_args.import(custom_args || {});

    build_data_table(
        order=phenotype_table_args.order,
        columns=phenotype_table_args.columns,
        column_args=phenotype_table_args.column_args,
        passed_data=phenotype_table_args.passed_data,
        key=phenotype_table_args.key,
        style=phenotype_table_args.style
    );
END %]


[% MACRO phenotypes BLOCK ;

    WRAPPER $field_block title="Phenotypes" key="phenotypes";
       build_phenotype_table(key='phenotypes');
    END;
END;
%]

[% MACRO phenotypes_not_observed BLOCK ;

    WRAPPER $field_block title="Phenotypes NOT Observed" key="phenotypes_not_observed";
        build_phenotype_table(key='phenotypes_not_observed');
    END;

 END;
%]


[% MACRO variation_table(args) BLOCK ;
    args = args || {};
    columns = {
                      variation         => 'Allele',
                      type              => 'Type',
                      molecular_change  => 'Molecular<br /> change',
                      effects           => 'Protein<br /> effects',
                      locations         => 'Locations',
                      phen_count        => '# of<br /> Phenotypes',
		              composite_change  => 'Protein<br />change',
                      isoform           => 'Isoform',
                      sources       => 'Source',
                      strain            => 'Strain',
                      gene              => 'Gene',
            };
    columns.import(args.columns || {});

    style = '';
    IF args.order_by;
        order_by_index = -1;
        FOREACH column_key IN args.order;
            order_by_index = order_by_index + 1;
            LAST IF column_key == args.order_by;
        END;
        style = style _ "order: [[$order_by_index, 'desc']],";
    END;

    build_data_table(
        order=args.order,
        columns=columns,
        passed_data=args.passed_data,
        key=args.key,
        classsearch='variation',
        style=style
    );

 END;
%]

[% MACRO build_human_diseases_table BLOCK;
    order = order || ['disease_term','genetic_entity','genotype','evidence_code','description','experimental_condition','modifier','reference'];
    columns = columns || {disease_term => 'Disease',
		              genetic_entity  => 'Genetic entity',
		              genotype  => 'Genotype',
		              association_type  => 'Association type',
                              evidence_code => 'Evidence code',
                              experimental_condition => 'Experimental condition',
                              modifier => 'Modifier',
                              modifier_association_type => 'Modifier association type',
			      description => 'Description'
                              reference => 'Reference',
                             };
    style = style || '
"columnDefs": [{"targets": 0, "orderData": [0, 1, 2, 5] },
               {"targets": 1, "orderData": [1, 0, 2, 5] },
               {"targets": 2, "orderData": [2, 0, 1, 5] },
]
';
    key = key || 'detailed_disease_model';

    build_data_table(order=order,
                     columns=columns,
                     style=style,
	             key=key);

END %]




[% MACRO remarks BLOCK;
   # Expects the remarks key to be defined in the data stash
   # Presents field in a toggle by default; pass "no_toggle=1" to conceal.

   contents = '';
   IF fields.remarks.data.0.defined('text');
      FOREACH obj IN fields.remarks.data;
        contents = contents _ evidence(obj.evidence, '', obj.text) _ '<br />';
      END;
   ELSE;
      contents = contents _ markup(fields.remarks.data.join('<br />'),0);
   END;

    IF no_toggle == 1;
        IF no_field == 1 && contents;
            '<h4>Remarks:</h4>';
            contents;
        ELSE;
          WRAPPER $field_block title="Remarks" key="remarks";
              contents;
          END;
        END;
    ELSIF contents != '';
          WRAPPER toggle title="Curatorial remarks";
                contents;
          END;
    END;
END;
%]

[% MACRO summary BLOCK;
    # Currently only includes Summary but could encompass other tags
    WRAPPER $field_block title="Summary" key="summary";
            fields.summary.data;
    END;
END;
%]

[% MACRO status BLOCK;
      WRAPPER $field_block title="Status" key="status";
           fields.status.data || 'Live';
      END;
END;
%]

[% MACRO taxonomy BLOCK;
   # Don't display unless we have a genus and species
   IF fields.taxonomy.data.genus;
      WRAPPER $field_block title="Species" key="taxonomy";
          '<span class="species">';
          fields.taxonomy.data.genus _ ' ' _ fields.taxonomy.data.species;
          '</span>';
      END;
   END;
END;
%]


[% MACRO error BLOCK; %]
  [% IF c.stash.error %]
  <br />
  <div class="ui-state-error ui-corner-all">

    <span class="ui-state-error-text">[% c.stash.error %]</span>

  </div>
  [% END %]
[% END;
%]


[% MACRO wb_id_field BLOCK;
   IF fields.name.data;
   WRAPPER $field_block title="WormBase ID";
          fields.name.data.id;
   END;
   END;
END;
%]

[% MACRO download_field BLOCK;
   class = (ACE2WB_MAP.$class || class) FILTER lower;
   IF downloadable(class);
   WRAPPER $field_block title="View Sequence";
   '<a href="' _ c.uri_for('/rest/widget', class, fields.name.data.id, 'sequences').path _ '?colorbox=1" class="button ui-corner-all slink" data-class="protein"><span class="ui-icon ui-icon-dna ui-button"></span></a>';
   END;
  END;
END;
%]

[% MACRO generate_file_download(filename, content, cname) BLOCK;
  '<div class="button ui-corner-all generate-file-download ' _ cname _ '"><span class="ui-icon ui-icon-arrowthickstop-1-s"></span><span>download</span>'
    _ '<div id="filename" class="ui-helper-hidden">' _ filename _ '</div>'
    _ '<div id="content" class="ui-helper-hidden">' _ content  _ '</div>'
_ '</div>';
END;
%]

[% MACRO link_button(class_name, url, label) BLOCK;
  '<a class="' _ class_name _ '" href="'_ url _ '" target="_blank">' _ label _ '</a>';
END;
%]

[% MACRO generate_intermine_download(url_query, label) BLOCK;
  link_button('download-intermine', c.config.intermine_server _ '/tools/wormmine/service/template/results?format=tab&columnheaders=friendly' _ url_query, label);
END; %]

[% MACRO format_sequence(seq, header, offset, length) BLOCK;
    format_seq = header ? ">$header\n" : "";
    IF length;
      prefix = seq.substr(0, offset);
      prefix = prefix FILTER lower;
      infix = seq.substr(offset, length);
      infix = infix FILTER upper;
      postfix = seq.substr(offset + length);
      postfix = postfix FILTER lower;
      seq = prefix _ infix _ postfix;
    END;
    FOREACH line IN seq.chunk(80);
      format_seq = format_seq _ line;
      UNLESS loop.last;
        format_seq = format_seq _ "\n";
      END;
    END;
    format_seq;
END;
%]

[% MACRO sequence(field_key, field_title, open_toggle) BLOCK;
    UNLESS field_key.defined; field_key = 'sequence'; END;

    IF fields.$field_key.data.defined;
      IF ref(fields.$field_key.data) == 'HASH' && fields.$field_key.data.defined('sequences');
        sequence_list = fields.$field_key.data.sequences;
      ELSE;
        sequence_list = fields.$field_key.data.sequence.defined ? [fields.$field_key.data] : fields.$field_key.data;
      END;
    ELSIF (field_key.defined('sequence') || field_key.0.defined('sequence'));
      sequence_list = field_key.defined('sequence') ? [field_key] : field_key;
      field_key = '';
    END;
    sequences = {};

    FOREACH obj IN sequence_list;
      IF obj.defined('sequence');
        seq = obj.sequence;
        NEXT IF seq.length == 0;

        # If parts of the feature commented on and possible have a highlighted region, then pass the parameters on:
        IF obj.defined('comment');
          header = obj.header || object.name.data.label;
          header = header _ ' ' _ obj.comment;
          IF obj.defined('highlight');
            format_seq = format_sequence(seq, header, obj.highlight.offset, obj.highlight.length);
          ELSE;
            format_seq = format_sequence(seq, header);
          END;
        ELSE;
          format_seq = seq.match('\s') ? '>' _ object.name.data.label _ ' ' _ obj.header  _ "\n" _ seq  : format_sequence(seq, obj.header || object.name.data.label);
        END;

        title = obj.header || 'sequence';
        seq_html = format_seq | remove('(\<(/?[^\>]+)\>)');
        title_html = title | remove('(\<(/?[^\>]+)\>)');
        fname = object.name.data.id _ title_html _ '.fasta';
        sequences.$obj.download = generate_file_download(fname, seq_html, "sequence-download");

        sequences.$obj.seq = format_seq | replace('\n', '<br />');
        sequences.$obj.title = 'view ' _ title;
        IF obj.length; sequences.$obj.title = sequences.$obj.title  _ ' (' _ (obj.length) _' ' _ (obj.type ? obj.type : 'bp') _ ')'; END;
      ELSE;
        sequences.$obj.download = obj;
      END;
    END;
    IF sequences.keys.size > 0;
      WRAPPER $field_block title=(field_title.defined ?  field_title : "Sequence") key=field_key;
        FOREACH obj IN sequence_list;
          '<div class="seq-toggle">';
          sequences.$obj.download;
          IF sequences.$obj.seq;
            op = open_toggle.defined ? open_toggle : (sequences.$obj.seq.length > 2000) ? 0 : 1;
            WRAPPER toggle title=sequences.$obj.title toggle_class="sequence-container" open=op;
              sequences.$obj.seq;
            END;
            IF (sequences.$obj.title.match('UTR') && sequences.$obj.seq.match('color'));
              '<p id="fade">Lowercase text in transcripts indicates introns and UTRs, UTR sequences having a light gray font. Uppercase, highlighted text in transcripts indicate coding sequence where each subsequent coding exon is highlighted in a different color, alternating between yellow and orange, to differentiate one exon from the next. Beige indicates flanking regions of a transcript.</p>';
            END;
          END;
          '</div>';
        END;


      END;

    ELSE;
      '<div class="caveat-emptor">No sequence data available for download</div>';
    END;


END;
%]


[% MACRO strains BLOCK;
     venn("Carrying " _ tag2link(object.name.data) _ " alone",
                                         fields.strains.data.carrying_gene_alone,
            "Available from the CGC",    fields.strains.data.available_from_cgc,
            "",                          fields.strains.data.carrying_gene_alone_and_cgc,
            "Other strains",             fields.strains.data.others, "strains");

    '<br />';

    rows = [];
    FOREACH type IN fields.strains.data.keys.sort;
      cgc = (( type == 'available_from_cgc') || (type == 'carrying_gene_alone_and_cgc')) ? 1 : 0;
      FOREACH strain IN fields.strains.data.$type;
      rows.push( { strain  = tag2link(strain),
                  genotype        = strain.genotype,
                  cgc        = cgc ? external_link('cgc', 'yes', strain.id) : 'no',
                } );
      END;
    END;

       build_data_table(order=['strain','genotype','cgc'],
                         columns={ strain    => 'Strain',
                              cgc       => 'Available<br /> from CGC?',
                          genotype  => 'Genotype',
                                 },
                         passed_data=rows);
  END;
%]

[% MACRO data_submission_link(url, label) BLOCK;
    '<a class="button data-submission-link" href="' _ url _ '">' _
        label _
    '</a>';
END; %]

[% MACRO phenotype_submission_link BLOCK;
    '<p class="data-submission-link-wrapper">' _
    '<strong>Notice a missing phenotype?</strong> Please let us know via our';
    data_submission_link('/submissions/phenotype.cgi', 'Phenotype Form') _
    '</p>';
END; %]

[%#
    #######################################################

      Class-specific MACROS, used only by a single class

    #######################################################
%]

[% # gene_list_by_species: custom dataTable processing for the Gene Class summary %]

[% MACRO gene_list_by_species BLOCK;

   WRAPPER $field_block title="$title";

       # loop through each element in <subroutine>.<return_data_key>.<... to array data> array
       # One table for each species
       # Force C. elegans to the top of the list
       species_list = fields.$key.data.keys.sort;
       species_list.unshift('Caenorhabditis elegans');
       species_list = species_list.unique;

       FOREACH species IN species_list;
            IF fields.$key.data.$species > 0;
                WRAPPER $field_block title="" key="$key";
		  WRAPPER toggle title=species _ '(' _ fields.$key.data.$species.size _ ' members)';
		    IF key == 'current_genes';
		      build_data_table(
			  order=['locus', 'sequence'],
			  columns={ locus    => 'Locus',
				    sequence => 'Sequence' },
			  passed_data=fields.$key.data.$species, key= key _ loop.index);
		    ELSE;
		      build_data_table(
			  order=['former_name', 'new_name', 'sequence'],
			  columns={ former_name => 'Former name',
				    new_name    => 'New name',
				    sequence => 'Sequence' },
			  passed_data=fields.$key.data.$species, key= key _ loop.index);
		    END;
		  END; #END of toggle WRAPPER
		END; # END of nested WRAPPER
           END; # END IF species contains data
         END; # END of SPECIES
     END; # END of primary WRAPPER
  END; # END of MACRO
%]

[%#
    #######################################################

      Page MACROS, used to construct class pages

    #######################################################
%]


[% MACRO add_static_widgets BLOCK %]

  [% FOREACH widget IN static_widgets %]
    [% widget_name = widget.widget_title %]
    [% w = { id = 'static-widget-' _ widget.widget_id
            title = widget.widget_title
            href =  c.uri_for('/rest','widget','static',widget.widget_id).path
            type = section == 'species' ? class : (section ? section : 'static')
            };
    %]
    [% IF widget.widget_order > 0 %]
      [% widget_order = widget.widget_order %]

      [% # I assign to ws just so that the result doesn't print %]
      [% ws = widgets.splice(widget_order, 0, [w]) %]
    [% ELSE %]
      [% widgets.push(w) %]
    [% END %]
  [% END %]
  [% IF c.check_any_user_role('admin', 'curator') %]
    [% w = { id = 'static-widget-0'
            title = 'Add new widget...'
            href =  c.uri_for('/rest','widget','static','0').path _ '?path=' _ c.req.uri.path  _ '&edit=1'
            type = section == 'species' ? class : (section ? section : 'static')
            };
    %]

      [% widgets.push(w) %]
  [% END %]
[% END %]


[% # Report Page elements; shared for species, resources, and tools %]
[% # Called from species/report.tt2 and resources.report.tt2        %]
[% # Callers should pass an array of widgets and the page title     %]

[% MACRO report_page BLOCK;
  widgets = [];
  widgets.push({ title="Page Content" type="title"});

  SET base = '/rest/widget';

  # Conditionally set up different types of pages.
  IF is_class_index && ((!class || class == 'all') || (species && species != 'all'));
    SET this_object_id    = 'all';
    SET this_object_label = species;
    base = base _ '/index';
    arg1 = species;
    this_object_id = class;
    IF species;
      section_fetch = 'species_list';
      IF class == 'all';
        section_fetch = c.config.sections.species_list.$species;
      ELSE;
        section_fetch = c.config.sections.species.$class;
      END;
    ELSE;
        section_fetch = c.config.sections.$section;
    END;
  ELSE;
    SET this_object_id    = object.name.data.id || 'all';
    SET this_object_label = object.name.data.label || class  || 'all';
    arg1 = class;
    section_fetch = c.config.sections.$section.$class;
  END;

# Debug
#    'section     : ' _ section      _ "<br />";
#    'class       : ' _ class   _ "<br />";
#    'species     : ' _ species   _ "<br />";

  # Get the keys for widgets based on configs, and sort by title attribute.
  separator = ';;';  # A hack, due to MACRO can't return a list
  result_str = sort_keys_by(section_fetch.widgets, '$_->{title}', separator);
  widget_list = result_str.split(separator);

  displayed_widgets = [];
  FOREACH widget_list.grep('^overview$');
    widget_list.unshift('overview');
  END;

  widget_list = widget_list.unique;

  FOREACH widget_name IN widget_list;
    IF widget_name;
    # Fetch the actual widget configuration.
    widget = section_fetch.widgets.$widget_name;

    # What context should this widget be displayed in, and what type of page are we?
    IF is_class_index;
        NEXT IF widget.display == "report";
    ELSE;
        NEXT IF widget.display == "index";
    END;

    displayed_widgets.push(widget_name);
    w = {  id    = widget_name
            title = widget.title
            href  = c.uri_for(base, arg1, this_object_id , widget_name).path
            type  = section == 'species' ? class : section
          };

    widgets.push(w);
    END;
  END;
  displayed_widgets = displayed_widgets.grep('^overview$');
  IF displayed_widgets.size > 0; overview = 1; END;

  # is_static refers to pages that don't handle objects (/resources/reagents)
  IF is_class_index && !is_static;
    index_widgets = (c.config.sections.species_list.$species || !species) ? ((species == 'all')||(class == 'all')) ? ['browse', 'basic_search'] : ['browse', 'basic_search'] : ['data_unavailable'];


    FOREACH widget_name IN index_widgets;
      t = widget_name FILTER ucfirst;
      widgets.push({ id = widget_name
                title = t.replace('_', ' ')
                href  = c.uri_for('/rest','widget', 'index', species || 'all', class, widget_name).path,
                type = section == 'species' ? class : section
            });
    END;
  END;


  add_static_widgets;

  # Add tools.
    tool_list = section_fetch.tools.keys.sort || [];

    # object pages automatically get the tree display
    IF object.name.data.id; tool_list.unshift('tree');
      IF c.check_any_user_role('admin'); tool_list.unshift('epic'); END;
    ELSIF (is_class_index && (class != 'all')); tool_list.unshift('schema'); END;

    IF tool_list.size > 0;
      widgets.push({ title="Tools" type="title"});
    END;
    FOREACH widget_name IN tool_list;
        widget = c.config.sections.tools.$widget_name;
        # What context should this widget be displayed in ?
        IF is_index;
          NEXT IF widget.display == "report";
        ELSE;
          NEXT IF widget.display == "index";
        END;

        w = { id = widget_name
              title = widget.title
              href =  c.uri_for('/tools',widget.name, 'run').path _ '?inline=1&class=' _ class _ '&name=' _ this_object_id _ '&sequence=' _ this_object_id,

              type = 'tools'
              };

        widgets.push(w);
    END;

  PROCESS "shared/sidebar_structure.tt2" widgets=widgets overview=overview;
%]

[% END; %]



[% MACRO embed_video(tag, open) BLOCK; %]
  [% movie_path = tag.file %]
  [% IF movie_path.match(site.external_urls.RNAi.base); %]
      <div>
          [% external_link(movie_path, tag.label) %]
      </div>
  [% ELSE %]
      [% WRAPPER toggle title=tag.label open=open; %]
          <video width="320" height="240" controls>
              <source src="[% movie_path %]" type="video/mp4">
          </video>
      [% END; %]
  [% END %]

[% END %]








[%# This is an expedient replication of report_page to support the userguide.
    Instead of specifying in config a list of widgets, we just pass them in %]

[% MACRO userguide_page BLOCK;
  widgets = [];
  widgets.push({ title="Page Content" type="title"});

  path = c.request.path;
  SET base = "/rest/widget/$path";

  # The userguide has an n-tiered hierarchy. eg: /userguide/developer/api
  # to make it easier to organize templates on the filesystem.
  # We need to add a param for the top level category.
  IF category == 'index'; subcategory = 'any'; END;

  FOREACH widget IN widget_list;
      hash = widget.keys;
      name = hash.0;
      wtitle = widget.$name;

      # No need to append the name for our final path for class documentation; HACK HACK HACK!
      IF path.match("api-rest/class");
              myhref = c.uri_for('/rest','widget',path).path;
      ELSE;
              myhref = c.uri_for('/rest','widget',path,name).path;
      END;

      w = { id    = name
            title = wtitle,
            href  = myhref,
            type  = 'resources'
          };

    widgets.push(w);
  END;

  widgets.push({ title="Tools" type="title"});

  FOREACH widget_name IN ['comment', 'issue'];
      t = widget_name FILTER ucfirst;
      w = { id = widget_name
            title = t _ 's ' _ '<a class="' _ widget_name _ '-count"></a>'
            href =  c.uri_for('/rest','feed',widget_name,class,this_object_id,'',this_object_label).path _ '?url=' _ c.req.uri.path
            type = 'tools'
          };
      widgets.push(w);
  END;

  PROCESS "shared/sidebar_structure.tt2" widgets=widgets overview=overview;
%]

[% END; %]






[%#
 #####################################################
 #
 #  Debugging
 #
 #    Simple view debugging. Should be passed the name
 #    of the component since this is localized to the template
 #    (or block). That is, it doesn't work as expected when
 #    used via PROCESS or INCLUDE
 #
 ####################################################
%]

[% BLOCK generic_debug_info %]
   <h5>General information:</h5>
   <pre>
   Catalyst action : [% c.controller.action_for(this) %]<br />
          template : [% template.name %]
   </pre>
[% END %]
